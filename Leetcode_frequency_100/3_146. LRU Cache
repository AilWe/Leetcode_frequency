146. LRU Cache
Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.

Implement the LRUCache class:

LRUCache(int capacity) Initialize the LRU cache with positive size capacity.
int get(int key) Return the value of the key if the key exists, otherwise return -1.
void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.
class LRUCache {
private:
    int capacity_;
    list<pair<int, int>> cache_;
    unordered_map<int, list<pair<int, int>>::iterator> m_;
public:
    LRUCache(int capacity) {
       capacity_ = capacity;
    }
    
    int get(int key) {
        const auto it = m_.find(key);
        //if key does not exist
        if(it == m_.cend()) return -1;
        
        //Move this key to the front of the cache
        cache_.splice(cache_.begin(), cache_, it->second);
        return it->second->second;
    }
    
    void put(int key, int value) {
        const auto it = m_.find(key);
        
        //key already exists
        if(it != m_.cend()){
            //update the value
            it->second->second = value;
            //move this entry to the front of the cache
            cache_.splice(cache_.begin(), cache_, it->second);
            return;
        }
        
        //Reached the capacity, remove the oldest entry
        if(cache_.size() == capacity_){
            const auto& node = cache_.back();
            m_.erase(node.first);
            cache_.pop_back();
        }
        
        //Insert the entry to the front of the cache and update mapping
        cache_.emplace_front(key, value);
        m_[key] =cache_.begin();
    }
};
