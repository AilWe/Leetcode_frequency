91. Decode Ways
A message containing letters from A-Z can be encoded into numbers using the following mapping:

'A' -> "1"
'B' -> "2"
...
'Z' -> "26"
To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, "11106" can be mapped into:

"AAJF" with the grouping (1 1 10 6)
"KJF" with the grouping (11 10 6)
Note that the grouping (1 11 06) is invalid because "06" cannot be mapped into 'F' since "6" is different from "06".

Given a string s containing only digits, return the number of ways to decode it.

The answer is guaranteed to fit in a 32-bit integer.
//recursive + memorization
class Solution {
public:
    
    int numDecodings(string s) {
        return recursiveWithMemo(0, s);
    }
private:
    unordered_map<int, int> memo;
    int recursiveWithMemo(int index, string &str){
        //Have seen this substr?
        if(memo.find(index) != memo.end())
            return memo[index];
        
        //if reach the end of the string
        //return 1 for success
        if(index == str.length())
            return 1;
        
        //if the string starts with a zero, it can not be decoded
        if(str[index] == '0') 
            return 0;
        
        if(index == str.length()-1)
            return 1;
        int ans1 = recursiveWithMemo(index+1, str);
        int ans2 = 0;
        if(stoi(str.substr(index,2)) <= 26)
            ans2 = recursiveWithMemo(index + 2, str);
        
        int ansSum = ans1+ans2;
        memo[index] = ansSum;
        return ansSum;
    }
};
//dp[i] is the number of ways of decoding substring s[:i]. Normally dp[i] = dp[i-1] + dp[i-2], but it is not true in this problem. Only when the decode is possible we add the result of the previous indices
class Solution {
public:
    int numDecodings(string s) {
        //DP array to store the subproblem results
        vector<int> dp(s.length()+1);
        dp[0] = 1;
        
        //Ways to decode a tring of size 1 is 1. Unless the string is '0'
        //'0' doesn't have a single digit decode
        dp[1] = s[0] == '0'? 0:1;
        
        for(int i = 2; i< dp.size(); ++i){
            //check if successful single digit decode is possible
            if(s[i-1] != '0')
                dp[i] = dp[i-1];
            
            //check if successful two digits decode is possible
            
            int two_digit = stoi(s.substr(i-2, 2));
            if(two_digit >= 10 && two_digit <= 26)
                dp[i] += dp[i-2];
        }
        return dp[s.length()];
    }
};
