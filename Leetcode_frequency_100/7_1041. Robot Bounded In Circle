1041. Robot Bounded In Circle
On an infinite plane, a robot initially stands at (0, 0) and faces north. The robot can receive one of three instructions:

"G": go straight 1 unit;
"L": turn 90 degrees to the left;
"R": turn 90 degrees to the right.
The robot performs the instructions given in order, and repeats them forever.

Return true if and only if there exists a circle in the plane such that the robot never leaves the circle.

This solution is based on two facts about the limit cycle trajectory.
After at most 4 cycles, the limit cycle trajectory returns to the initial point x = 0, y = 0. That is related to the fact that 4 directions (north, east, south, west) define the repeated cycles' plane symmetry
Let's use numbers from 0 to 3 to mark the directions: north = 0, east = 1, south = 2, west = 3. In the array directions we could store corresponding coordinates changes, i.e. directions[0] is to go north, directions[1] is to go east, directions[2] is to go south, and directions[3] is to go west.
The initial robot position is in the center x = y = 0, facing north idx = 0.
c++:
class Solution {
public:
    bool isRobotBounded(string instructions) {
        //N, E, S, W = 0, 1, 2, 3
        vector<vector<int>> directions = {{0,1},{1,0},{0,-1},{-1,0}};
        
        int x = 0;
        int y = 0;
        int idx = 0;
        for(auto c:instructions){
            if(c == 'L') idx = (idx+3)%4;
            else if(c == 'R') idx = (idx +1)%4;
            else{
                x += directions[idx][0];
                y += directions[idx][1];
            }    
        }
        
        return (x == 0 && y == 0) || idx != 0;
        
        
    }
};
java:
class Solution {
    public boolean isRobotBounded(String instructions) {
        //north = 0, east = 1, south = 2, west = 3
        
        int[][] directions = new int[][]{{0,1}, {1,0}, {0,-1},{-1,0}};
        
        //Initial position is in the center
        int x = 0;
        int y = 0;
        
        //facing north
        int idx = 0;
        
        for(char i : instructions.toCharArray()){
            if(i == 'L')
                idx = (idx+3) % 4;
            else if(i == 'R')
                idx = (idx+1) % 4;
            else{
                x += directions[idx][0];
                y += directions[idx][1];
            }
        }
        
        
        //after one cycle:
        // robot returns into initial position
        // or robot doesn't face north
        
        return (x == 0 && y == 0) || (idx != 0);
    }
}
