53. Maximum Subarray
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.
S: O(n)
class Solution {
public:
    //一维动态规划
    //nums: [-2, 1, -3, 4, -1, 2, 1, -5, 4]
    //f:    [-2, 1, -2, 4, 3, 5, 6, -1, -4]
    //dp
    int maxSubArray(vector<int>& nums) {
        //f[i] // maxSubArray(0..i);
        //f[i] =  f[i-1] >0 ? nums[i]+f[i-1] : nums[i];
        vector<int> f(nums.size());
        f[0] = nums[0];
        for(int i = 1; i< nums.size(); ++i){
            f[i] = max(f[i-1]+nums[i], nums[i]);
        }
        return *max_element(f.begin(), f.end());
    }
};


class Solution {
public:
    //一维动态规划
    //nums: [-2, 1, -3, 4, -1, 2, 1, -5, 4]
    //f:    [-2, 1, -2, 4, 3, 5, 6, -1, -4]
    //dp
    //S: O(1)
    int maxSubArray(vector<int>& nums) {
        //f[i] // maxSubArray(0..i);
        //f[i] =  f[i-1] >0 ? nums[i]+f[i-1] : nums[i];
        int ans = nums[0];
        int sum = nums[0];
        for(int i = 1; i< nums.size(); ++i){
            sum = max(sum +nums[i], nums[i]);
            if(sum > ans) ans = sum;
        }
        return ans;
    }
};
