70. Climbing Stairs
You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
class Solution {
public:
    int climbStairs(int n) {
        //f[i] = climbStairs(i)
        vector<int> f(n+1, 0);
        //f[i] = f[i-1] + f[i-2]
        f[0] = 1;
        f[1] = 1;
        //第四步可以拆成第二步走2步+第三步走一步
        for(int i=2; i<=n; ++i)
            f[i] = f[i-1]+f[i-2];
        return f[n];
    }
};
//无计划递归会TLE
class Solution {
public:
    int climbStairs(int n) {
        f_ = vector<int>(n+1, 0);
        return numOfSolution(n);
    }
private:
    int numOfSolution(int n){
        if(n<=1) return 1;
        return numOfSolution(n-1)+numOfSolution(n-2);
    }
    vector<int> f_;
};

//计划递归
class Solution {
public:
    int climbStairs(int n) {
        f_ = vector<int>(n+1, 0);
        return numOfSolution(n);
    }
private:
    int numOfSolution(int n){
        if(n<=1) return 1;
        if(f_[n] > 0) return f_[n];
        f_[n] = numOfSolution(n-1)+numOfSolution(n-2);
        return f_[n];
    }
    vector<int> f_;
};
