1656. Design an Ordered Stream
There is a stream of n (id, value) pairs arriving in an arbitrary order, where id is an integer between 1 and n and value is a string. No two pairs have the same id.

Design a stream that returns the values in increasing order of their IDs by returning a chunk (list) of values after each insertion. The concatenation of all the chunks should result in a list of the sorted values.

Implement the OrderedStream class:

OrderedStream(int n) Constructs the stream to take n values.
String[] insert(int id, String value) Inserts the pair (id, value) into the stream, then returns the largest possible chunk of currently inserted values that appear next in the order.
class OrderedStream {
    
private:
    vector<string> stream_;
    int start_;
public:
    OrderedStream(int n) {
        stream_.resize(n);
        start_ = 0;
    }
    
    vector<string> insert(int id, string value) {
        stream_[id-1] = value;
        vector<string> ans;
        for(int i = start_; i< stream_.size(); ++i){
            if(stream_[i] == "") {
                if(i>=0) start_=i;
                break;
            }
            ans.push_back(stream_[i]);
        }
        return ans;
    }
};

/**
 * Your OrderedStream object will be instantiated and called as such:
 * OrderedStream* obj = new OrderedStream(n);
 * vector<string> param_1 = obj->insert(id,value);
 */
