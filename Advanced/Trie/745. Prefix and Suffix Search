745. Prefix and Suffix Search
Design a special dictionary which has some words and allows you to search the words in it by a prefix and a suffix.

Implement the WordFilter class:

WordFilter(string[] words) Initializes the object with the words in the dictionary.
f(string prefix, string suffix) Returns the index of the word in the dictionary which has the prefix prefix and the suffix suffix. If there is more than one valid index, return the largest of them. If there is no such word in the dictionary, return -1.

Solution 1: Hashtable
generate all possible filters
T: O(N*L^3) + O(QL)
S: O(N*L^3)

key = {prefix}_{suffix}
apple:[_,a_e, ap_le, appl_ple,...apple_apple]
a word of length L has L^2 possible keys
hashtable: key -> word_index

class WordFilter {
private:
    unordered_map<string, int> filters_;
public:
    WordFilter(vector<string>& words) {
        int index = 0;
        for(const string &word: words){
            int n = word.length();
            vector<string> prefixes(n+1, "");
            vector<string> suffixes(n+1, "");
            for(int i = 0; i<n; ++i){
                prefixes[i+1] = prefixes[i] + word[i];
                suffixes[i+1] = word[n-i-1] + suffixes[i];
            }
            
            for(const string &prefix: prefixes)
                for(const string & suffix: suffixes)
                    filters_[prefix + "_" +suffix] = index;
            ++index;
        }
    }
    
    int f(string prefix, string suffix) {
        const string key = prefix +"_"+suffix;
        auto it = filters_.find(key);
        if(it != filters_.end()) return it->second;
        return -1;
    }
};

/**
 * Your WordFilter object will be instantiated and called as such:
 * WordFilter* obj = new WordFilter(words);
 * int param_1 = obj->f(prefix,suffix);
 */
Solution 2: Trie
T: O(N*L^2)
