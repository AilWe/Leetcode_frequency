307. Range Sum Query - Mutable
Given an array nums and two types of queries where you should update the value of an index in the array, and retrieve the sum of a range in the array.

Implement the NumArray class:

NumArray(int[] nums) Initializes the object with the integer array nums.
void update(int index, int val) Updates the value of nums[index] to be val.
int sumRange(int left, int right) Returns the sum of the subarray nums[left, right] (i.e., nums[left] + nums[left + 1], ..., nums[right]).

Idea:
Fenwick Tree

init T: O(nlogn)
query T: O(logn)
update T: O(logn)
class FenwickTree{
private:
    static inline int lowbit(int x){
        return x & (-x);
    }
    vector<int> sums_;
public:
    FenwickTree(int n): sums_(n+1, 0) {}
    
    void update(int i, int delta){
        while(i< sums_.size()){
            sums_[i] += delta;
            i += lowbit(i);
        }
    }
    
    int query(int i) const{
        int sum = 0;
        while(i > 0){
            sum += sums_[i];
            i -= lowbit(i);
        }
        return sum;
    }
};
class NumArray {
private:
    vector<int> nums_;
    FenwickTree tree_;
public:
    NumArray(vector<int>& nums): nums_(move(nums)), tree_(nums_.size()) {
        for(int i = 0; i< nums_.size(); ++i)
            tree_.update(i+1, nums_[i]);
    }
    
    void update(int index, int val) {
        tree_.update(index+1, val - nums_[index]);
        nums_[index] = val;
    }
    
    int sumRange(int left, int right) {
        return tree_.query(right+1) - tree_.query(left);
    }
};

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray* obj = new NumArray(nums);
 * obj->update(index,val);
 * int param_2 = obj->sumRange(left,right);
 */
class SegmentTreeNode{
public:
    SegmentTreeNode(int start, int end, int sum, SegmentTreeNode* left = nullptr, SegmentTreeNode* right = nullptr):
        start(start),
        end(end),
        sum(sum),
        left(left),
        right(right){}
    SegmentTreeNode(const SegmentTreeNode &) = delete;
    SegmentTreeNode &operator = (const SegmentTreeNode&) = delete;
    ~SegmentTreeNode(){
        delete left;
        delete right;
        left = right = nullptr;
    }
    int start;
    int end;
    int sum;
    SegmentTreeNode *left;
    SegmentTreeNode *right;
};
class NumArray {
private:
    vector<int> nums_;
    unique_ptr<SegmentTreeNode> root_;
    SegmentTreeNode* buildTree(int start, int end) {  
    if (start == end) {      
      return new SegmentTreeNode(start, end, nums_[start]);
    }
    int mid = start + (end - start) / 2;
    auto left = buildTree(start, mid);
    auto right = buildTree(mid + 1, end);
    auto node = new SegmentTreeNode(start, end, left->sum + right->sum, left, right);    
    return node;
  }
  
  void updateTree(SegmentTreeNode* root, int i, int val) {
    if (root->start == i && root->end == i) {
      root->sum = val;
      return;
    }
    int mid = root->start + (root->end - root->start) / 2;
    if (i <= mid) {
      updateTree(root->left, i, val);
    } else {      
      updateTree(root->right, i, val);
    }
    root->sum = root->left->sum + root->right->sum;
  }
  
  int sumRange(SegmentTreeNode* root, int i, int j) {    
    if (i == root->start && j == root->end) {
      return root->sum;
    }
    int mid = root->start + (root->end - root->start) / 2;
    if (j <= mid) {
      return sumRange(root->left, i, j);
    } else if (i > mid) {
      return sumRange(root->right, i, j);
    } else {
      return sumRange(root->left, i, mid) + sumRange(root->right, mid + 1, j);
    }
  }
public:
    NumArray(vector<int>& nums) {
        nums_.swap(nums);
        if(!nums_.empty())
            root_.reset(buildTree(0, nums_.size()-1));
    }
    
    void update(int index, int val) {
        updateTree(root_.get(), index, val);
    }
    
    int sumRange(int left, int right) {
        return sumRange(root_.get(), left, right);
    }
};

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray* obj = new NumArray(nums);
 * obj->update(index,val);
 * int param_2 = obj->sumRange(left,right);
 */
