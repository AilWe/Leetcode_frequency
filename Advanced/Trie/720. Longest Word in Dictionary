720. Longest Word in Dictionary
Given a list of strings words representing an English Dictionary, find the longest word in words that can be built one character at a time by other words in words. If there is more than one possible answer, return the longest word with the smallest lexicographical order.

If there is no answer, return the empty string.

Solution 1: Brute Force
For every word, check every of it prefixes

"apple"
"a"         O(1)
"ap"        O(2)
"app"       O(3)
"appl"      O(4)

T: O(sum(wi^2)), S: O(n*w)

class Solution {
public:
    string longestWord(vector<string>& words) {
        string best;
        unordered_set<string> dict(words.begin(), words.end());
        
        for(const string &word : words){
            if(word.length()< best.length() || (word.length() == best.length() && word > best)) continue;
            string prefix;
            bool valid = true;
            for(int i = 0; i< word.length()-1 && valid; ++i){
                prefix += word[i];
                if(!dict.count(prefix)) valid = false;
            }
            if(valid) best = word;
        }
        
        return best;
    }
};

class Solution {
public:
    string longestWord(vector<string>& words) {
        //Sort by length DESC, if there is a tie, sort by lexcial order
        sort(words.begin(), words.end(),
            [](const string &w1, const string &w2){
                if(w1.length() != w2.length())
                    return w1.length() > w2.length();
                return w1< w2;
            });
        unordered_set<string> dict(words.begin(), words.end());
        
        for(const string &word: words){
            string prefix;
            bool valid = true;
            for(int i = 0; i< word.length()-1 && valid; ++i){
                prefix += word[i];
                if(!dict.count(prefix)) {
                    valid = false; 
                }
            }
            if(valid) return word;
        }
        return "";
    }
};
Solution 2: Trie
For every word, check every of its prefixes

"apple"     
"a"         O(1)
"ap"        O(1)
"app"       O(1)
"appl"      O(1)

T: O(sum(wi))
S: O(26*n*w)

class Trie{
private:
    struct TrieNode{
        TrieNode(): is_word(false), children(26, nullptr){}
        ~TrieNode(){
            for(auto child: children)
                if(child) delete child;
        }
        bool is_word;
        vector<TrieNode*> children;
    };
    unique_ptr<TrieNode> root_;
public:
    Trie(): root_(new TrieNode()){}
    
    void insert(const string &word){
        TrieNode* p = root_.get();
        for(const char c: word){
            if(!p->children[c-'a'])
                p->children[c-'a'] = new TrieNode();
            p = p->children[c-'a'];
        }
        p->is_word = true;
    }
    
    bool hasAllPrefixes(const string &word){
        const TrieNode* p = root_.get();
        for(const char c: word){
            if(!p->children[c-'a']) return false;
            p = p->children[c-'a'];
            if(!p->is_word) return false;
        }
        return true;
    }
};
class Solution {
public:
    string longestWord(vector<string>& words) {
        sort(words.begin(), words.end(),
            [](const string &w1, const string &w2){
                if(w1.length() != w2.length())
                    return w1.length() > w2.length();
                return w1<w2;
            });
        
        Trie trie;
        for(const string &word: words)
            trie.insert(word);
        
        for(const string &word: words)
            if(trie.hasAllPrefixes(word)) return word;
        
        return "";
    }
};
class Trie{
private:
    struct TrieNode{
        TrieNode(): is_word(false), children(26, nullptr){}
        ~TrieNode(){
            for(auto child: children)
                if(child) delete child;
        }
        bool is_word;
        vector<TrieNode*> children;
    };
    unique_ptr<TrieNode> root_;
public:
    Trie(): root_(new TrieNode()){}
    
    void insert(const string &word){
        TrieNode* p = root_.get();
        for(const char c: word){
            if(!p->children[c-'a'])
                p->children[c-'a'] = new TrieNode();
            p = p->children[c-'a'];
        }
        p->is_word = true;
    }
    
    bool hasAllPrefixes(const string &word){
        const TrieNode* p = root_.get();
        for(const char c: word){
            if(!p->children[c-'a']) return false;
            p = p->children[c-'a'];
            if(!p->is_word) return false;
        }
        return true;
    }
};
class Solution {
public:
    string longestWord(vector<string>& words) {
        Trie trie;
        for(const string &word: words)
            trie.insert(word);
        string best;
        for(const string &word: words){
            if(word.length()< best.length() || (word.length() == best.length() && word > best)) continue;
            if(trie.hasAllPrefixes(word))
                best = word;
        }
        return best;
    }
};
