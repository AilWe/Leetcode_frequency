677. Map Sum Pairs
Implement the MapSum class:

MapSum() Initializes the MapSum object.
void insert(String key, int val) Inserts the key-val pair into the map. If the key already existed, the original key-value pair will be overridden to the new one.
int sum(string prefix) Returns the sum of all the pairs' value whose key starts with the prefix.
//hashtable(key->val)

class MapSum {
public:
    /** Initialize your data structure here. */
    MapSum() {
        
    }
    
    void insert(string key, int val) {
        int inc  = val;
        if(vals_.count(key)){
            inc-=vals_[key];
        }
        vals_[key] = val;
        for(int i = 1; i<= key.length(); ++i)
            sums_[key.substr(0, i)] += inc;
    }
    
    int sum(string prefix) {
        return sums_[prefix];
    }

private:
    unordered_map<string, int> vals_;
    unordered_map<string, int> sums_;
};
//Trietree
class MapSum {
private:
    struct Trie{
        vector<Trie*> children;
        int sum;
        Trie():children(128, nullptr), sum(0){}
        ~Trie(){
            for(auto child:children)
                if(child) delete child;
            children.clear();
        }
    };
    
    Trie root;
    unordered_map<string, int> vals_;//key->val
public:
    /** Initialize your data structure here. */
    MapSum() {
    
    }
    
    void insert(string key, int val) {
        int inc = val - vals_[key];//key not exist, return 0
        Trie* p = &root;
        for(const char c: key){
            if(!p->children[c])
                p->children[c] = new Trie();
            p->children[c]->sum += inc;
            p = p->children[c];
        }
        vals_[key] = val;
    }
    
    int sum(string prefix) {
        Trie* p = &root;
        for(const char c: prefix){
            if(!p->children[c]) return 0;
            p = p->children[c];
        }
        return p->sum;
    }
};

/**
 * Your MapSum object will be instantiated and called as such:
 * MapSum* obj = new MapSum();
 * obj->insert(key,val);
 * int param_2 = obj->sum(prefix);
 */
