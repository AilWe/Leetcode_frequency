827. Making A Large Island
In a 2D grid of 0s and 1s, we change at most one 0 to a 1.

After, what is the size of the largest island? (An island is a 4-directionally connected group of 1s).
//T: O(n^2)
//S: O(n^2)
class Solution {
public:
    int largestIsland(vector<vector<int>>& grid) {
        int color_ = 1;
        
        int m_ = grid.size();
        int n_ = grid[0].size();
        unordered_map <int, int> areas;
        int ans = 0;
        for(int i = 0; i < m_;++i)
            for(int j = 0; j< n_; ++j){
                if(grid[i][j] == 1){
                    ++color_;
                    areas[color_] = getArea(grid, j, i, n_, m_, color_);
                    ans = max(ans, areas[color_]);
                }
            }
        for (int i = 0; i<m_; ++i)
            for(int j = 0; j<n_; ++j)
                if(grid[i][j] == 0){
                    int area = 1;
                    for (int color : set<int>{getColor(grid,j, i-1, n_, m_),getColor(grid,j, i+1, n_, m_),getColor(grid, j-1, i,n_, m_),getColor(grid,j+1,i, n_, m_)})
                        area = area + areas[color];
                    ans = max(ans, area);
                }
        return ans;
    }
    int getArea(vector<vector<int>> &grid, int x, int y, int n_, int m_, int color_){
        if(x<0||x>=n_|| y<0||y>=m_||grid[y][x]!= 1) return 0;
        grid[y][x] = color_;
        return 1 + getArea(grid, x-1, y, n_, m_, color_)+getArea(grid, x+1, y, n_, m_, color_) + getArea(grid, x, y-1, n_, m_, color_)+ getArea(grid, x, y+1, n_, m_, color_);
    }
    int getColor (vector<vector<int>> &grid, int x, int y, int n_, int m_){
        return (x<0||x>=n_|| y<0||y>=m_)? 0:grid[y][x];
    }
};
