1298. Maximum Candies You Can Get from Boxes
Given n boxes, each box is given in the format [status, candies, keys, containedBoxes] where:

status[i]: an integer which is 1 if box[i] is open and 0 if box[i] is closed.
candies[i]: an integer representing the number of candies in box[i].
keys[i]: an array contains the indices of the boxes you can open with the key in box[i].
containedBoxes[i]: an array contains the indices of the boxes found in box[i].
You will start with some boxes given in initialBoxes array. You can take all the candies in any open box and you can use the keys in it to open new boxes and you also can use the boxes you find in it.

Return the maximum number of candies you can get following the rules above.

Solution: BFS

Use a queue to track boxes that we can open

When to push a box onto the queue
1. When we find the box with its key in hand
2. When we find the key of a box that is already found

status => keys in hand
init boxes => boxes in hand

Each box will be enqueued at most once
T: O(B+K), S: O(B)
class Solution {
public:
    int maxCandies(vector<int>& status, vector<int>& candies, vector<vector<int>>& keys, vector<vector<int>>& containedBoxes, vector<int>& initialBoxes) {
        queue<int> q;
        vector<int> myBoxes(status.size());
        vector<int> myKeys(status);
        for(int b: initialBoxes){
            myBoxes[b] = 1;
            if(myKeys[b]) q.push(b);
        }
        int ans = 0;
        while(!q.empty()){
            int b = q.front();
            q.pop();
            ans += candies[b];
            for(int t: containedBoxes[b]){
                myBoxes[t] = 1;
                if(myKeys[t]) q.push(t);
            }
            for(int t : keys[b]){
                if(!myKeys[t] && myBoxes[t]) q.push(t);//multiple box use same key
                myKeys[t] = 1;
            }
        }
        return ans;
    }
};
