1319. Number of Operations to Make Network Connected
There are n computers numbered from 0 to n-1 connected by ethernet cables connections forming a network where connections[i] = [a, b] represents a connection between computers a and b. Any computer can reach any other computer directly or indirectly through the network.

Given an initial computer network connections. You can extract certain cables between two directly connected computers, and place them between any pair of disconnected computers to make them directly connected. Return the minimum number of times you need to do this in order to make all the computers connected. If it's not possible, return -1. 

Approach 1: union find
N node only need n-1 edges to form a connected component (CC) (a spanning tree)

For each cable, union the two sides, if they already have the same root e.g. int the same CC, that cable is redundant.
Identify extra cables (that can be unplugged and use them to connect others) to make sure extra cables >= connected groups - 1

Not needed at all! as long as we have n-1 cables, we can always find a way to connect all computers
Union find
T: O(v+E), S: O(V)
class Solution {
public:
    int makeConnected(int n, vector<vector<int>>& connections) {
        if(connections.size() < n-1) return -1;
        vector<int> p(n);
        iota(p.begin(), p.end(), 0);
        
        function<int(int)> find = [&](int x){
            return p[x] == x? x: p[x] = find(p[x]);
        };
        
        for(const auto & c: connections){
            p[find(c[0])] = find(c[1]);
        }
        
        unordered_set<int> s;
        for(int i = 0; i< n; ++i)
            s.insert(find(i));
        
        return s.size() - 1;
    }
};

Approach 2: DFS
Build a undirected graph
Use DFS to find all the of connexted components
ans = CC -1
T: O(V+E), S: O(V+E)
class Solution {
public:
    int makeConnected(int n, vector<vector<int>>& connections) {
        if(connections.size() < n-1) return -1;
        vector<vector<int>> g(n);
        for(const auto&c:connections){
            g[c[0]].push_back(c[1]);
            g[c[1]].push_back(c[0]);
        }
        vector<int> seen(n);
        int count = 0;
        function<void(int)> dfs =[&](int cur){
            for(int nxt: g[cur])
                if(!seen[nxt]++) dfs(nxt);
        };
        for(int i = 0; i< n; ++i)
            if(!seen[i]++ && ++count)
                dfs(i);
        return count - 1;
    }
};
