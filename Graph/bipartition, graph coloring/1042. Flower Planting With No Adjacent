1042. Flower Planting With No Adjacent
You have n gardens, labeled from 1 to n, and an array paths where paths[i] = [xi, yi] describes a bidirectional path between garden xi to garden yi. In each garden, you want to plant one of 4 types of flowers.

All gardens have at most 3 paths coming into or leaving it.

Your task is to choose a flower type for each garden such that, for any two gardens connected by a path, they have different types of flowers.

Return any such a choice as an array answer, where answer[i] is the type of flower planted in the (i+1)th garden. The flower types are denoted 1, 2, 3, or 4. It is guaranteed an answer exists.
class Solution {
public:
    vector<int> gardenNoAdj(int n, vector<vector<int>>& paths) {
        vector<int> ans(n,0);
        vector<vector<int>> G(n);
        for(const auto & p: paths){
            G[p[0]-1].push_back(p[1]-1);
            G[p[1]-1].push_back(p[0]-1);
        }
        for(int i = 0; i<n; ++i){
            int mask = 0;
            for(const auto&j: G[i])
                mask |=(1<<ans[j]);
            for(int c = 1; c<=4 && ans[i] == 0; ++c)
                if(!(mask&(1<<c))) ans[i] = c;
        }
        return ans;
    }
};
class Solution {
public:
    vector<int> gardenNoAdj(int n, vector<vector<int>>& paths) {
        vector<vector<int>> graph(n);
        for(auto p: paths){
            graph[p[0]-1].push_back(p[1]-1);
            graph[p[1]-1].push_back(p[0]-1);
        }
        vector<int> colors(n, 0);
        for(int i = 0; i< n; ++i){
            if(!colors[i])
                coloring(graph, colors, i);
        }
        return colors;
    }
    void coloring(vector<vector<int>> &graph, vector<int> &colors, int curr){
        vector<bool> used(5,0);
        for(auto p: graph[curr]){
            used[colors[p]] = 1;
        }
        for(int i = 1; i<=4; i++){
            if(!used[i]){
                colors[curr] =i;
                break;
            }
        }
        for(auto nxt: graph[curr]){
            if(!colors[nxt])
                coloring(graph, colors, nxt);
        }
    }
};
