1263. Minimum Moves to Move a Box to Their Target Location
Storekeeper is a game in which the player pushes boxes around in a warehouse trying to get them to target locations.

The game is represented by a grid of size m x n, where each element is a wall, floor, or a box.

Your task is move the box 'B' to the target position 'T' under the following rules:

Player is represented by character 'S' and can move up, down, left, right in the grid if it is a floor (empy cell).
Floor is represented by character '.' that means free cell to walk.
Wall is represented by character '#' that means obstacle  (impossible to walk there). 
There is only one box 'B' and one target cell 'T' in the grid.
The box can be moved to an adjacent free cell by standing next to the box and then moving in the direction of the box. This is a push.
The player cannot walk through the box.
Return the minimum number of pushes to move the box to the target. If there is no way to reach the target, return -1.

Map is fixed
State: (box_pos, player_pos)
Goal: minimum # of pushes to move the box to the target
BFS by # of pushes => player "teleports" from current pos to the next push position (0 moves).
However, we still need to check whether there is a path BFS/DFS inside antoher BFS
(bx, by, px, py)
dx = bx-px, dy = by-py
(bx+dx, by+dy, bx, by)
class Solution {
struct Node{
    int bx;
    int by;
    int px;
    int py;
    
    int key() const {
        return ((by * 20 + bx) << 16)| (py * 20 + px);
    }
};
public:
    int minPushBox(vector<vector<char>>& grid) {
        const int n = grid.size();
        const int m = grid[0].size();
        Node start;
        Node end;
        
        for(int y = 0; y<n; ++y){
            for(int x = 0; x<m; ++x){
                if(grid[y][x] == 'B'){
                    start.bx = x;
                    start.by = y;
                }
                else if(grid[y][x] == 'S'){
                    start.px = x;
                    start.py = y;
                }
                else if(grid[y][x] == 'T'){
                    end.bx = x;
                    end.by = y;
                }
            }
        }
        
        auto hasPath = [&](const Node &cur, int tx, int ty){
            vector<int> seen(m*n);
            function<bool(int, int)> dfs = [&](int x, int y){
                if(x<0 || x>=m || y<0 || y>= n || grid[y][x] == '#')
                    return false;
                if(x == cur.bx && y == cur.by) return false;
                
                int key = y*m +x;
                if(seen[key]) return false;
                seen[key] = 1;
                
                if(x == tx && y == ty) return true;
                return dfs(x+1, y) || dfs(x-1, y) || dfs(x, y+1) || dfs(x, y-1);
            };
            return dfs(cur.px, cur.py);
        };
        
        auto canPush = [&](const Node &cur, int dx, int dy, Node* nxt){
            const int bx = cur.bx + dx;
            const int by = cur.by + dy;
            
            if(bx < 0 || bx >= m || by <0 || by >=n || grid[by][bx] == '#')
                return false;
            if(!hasPath(cur, cur.bx - dx, cur.by - dy)) return false;
            nxt->bx = bx;
            nxt->by = by;
            nxt->px = cur.bx;
            nxt->py = cur.by;
            return true;
        };
        
        const vector<int> dirs{0, -1, 0, 1, 0};
        unordered_set<int> seen;
        queue<Node> q;
        q.push(start);
        int steps = 0;
        
        while(q.size()){
            int size = q.size();
            while(size--){
                Node cur = q.front();
                q.pop();
                for(int i = 0; i<4; ++i){
                    Node nxt;
                    if(!canPush(cur, dirs[i], dirs[i+1], &nxt) || seen.count(nxt.key())) continue;
                    if(nxt.bx == end.bx && nxt.by == end.by) return steps+1;
                    seen.insert(nxt.key());
                    q.push(nxt);
                }
            }
            ++steps;
        }
        return -1;
    }
};

A*: g = # of pushes, h = manhattan distance from curr box pos to target one (<= actual cost).
f = g+h

