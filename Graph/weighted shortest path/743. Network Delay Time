You are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.

We will send a signal from a given node k. Return the time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1.
Graph problem: single source all destinations shortest path
Solution 1: Dijkstra's algorithm
T: O(N^2)-> O(NlogN + E)
S: O(N+E)

Solution 2: Bellman-Ford
T: O(NE)
S: O(N)
class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        constexpr int MAX_TIME = 101*100;
        vector<int> dist(n, MAX_TIME);//
        dist[k-1] = 0;
        for(int i = 0; i<n; ++i)
            for(const auto &time:times){
                int u = time[0] -1, v = time[1] - 1, w = time[2];
                dist[v] = min(dist[v], dist[u] + w);//动态规划
            }
        int max_dist = *max_element(dist.begin(), dist.end());
        return max_dist == MAX_TIME?-1:max_dist;
    }
};
Solution 3: Floyd-Warshall(All pair)
T: O(N^3)
S: O(N^2)
