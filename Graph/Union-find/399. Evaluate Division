399. Evaluate Division
You are given an array of variable pairs equations and an array of real numbers values, where equations[i] = [Ai, Bi] and values[i] represent the equation Ai / Bi = values[i]. Each Ai or Bi is a string that represents a single variable.

You are also given some queries, where queries[j] = [Cj, Dj] represents the jth query where you must find the answer for Cj / Dj = ?.

Return the answers to all queries. If a single answer cannot be determined, return -1.0.

Note: The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.
//dfs & Union-find & falledwash
//Forest
//solution 1: Graph+DFS
//A/B = 2
//g[A][B] = 2 | g[B][A] = 1.0
//T: O(e+q*e), S:O(e)
class Solution {
public:
    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
        //g[A][B] = k -> A / B = k
        unordered_map<string, unordered_map<string, double>> g;
        for(int i = 0; i< equations.size();++i){
            const string &A = equations[i][0];
            const string &B = equations[i][1];
            const double k = values[i];
            //有向图，权重不同
            g[A][B] = k;
            g[B][A] = 1.0/k;
        }
        vector<double> ans;
        for(const auto &pair: queries){
            const string &X = pair[0];
            const string &Y = pair[1];
            if(!g.count(X)||!g.count(Y)){
                ans.push_back(-1.0);
                continue;
            }
            unordered_set<string> visited;
            ans.push_back(divide(X, Y, g, visited));
        }
        return ans;
    }
private:
    //get result of A/B
    double divide(const string &A, const string &B, unordered_map<string, unordered_map<string, double>> &g, unordered_set<string> &visited){
        if(A==B) return 1.0;
        visited.insert(A);
        for(const auto &pair:g[A]){
            const string &C=pair.first;
            if(visited.count(C)) continue;
            double d = divide(C,B,g, visited);//d = C/B
            //A/B = C/B * A/C
            if(d>0) return d*g[A][C];
        }
        return -1.0;
    }
};
//Union Find
A/B = 2 -> parents[A] = {B,2}
           parents[B] = {B, 1.0}

B/C = 3 -> parents[C] = {B. 1.0/3}

A/C? p[A].key == p[C].key == B = p[A].val / p[C].val = 2/(1.0/3) = 6
T: O(e+q) S: O(e)
class Solution {
public:
    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
        unordered_map<string, pair<string, double>> g;
        for(int i = 0; i< values.size(); ++i){
            string A = equations[i][0];
            string B = equations[i][1];
            double k = values[i];
            if(!g.count(A) && !g.count(B)){
                g[A] = {B, k};
                g[B] = {B, 1.0};
            }
            else if (!g.count(A)){
                g[A] = {B, k};
            }
            else if (!g.count(B)){
                g[B] = {A, 1.0/k};
            }
            else{
                auto rA = find(A,g);
                auto rB = find(B,g);
                g[rA.first] = {rB.first, k/rA.second * rB.second};
            }
        }
        
            vector<double> result;
            for(auto e:queries){
                string x = e[0];
                string y = e[1];
                if(!g.count(x) || !g.count(y)){
                    result.push_back(-1.0);
                    continue;
                }
                double ans = 0;
                auto rx = find(x, g);
                auto ry = find(y, g);
                if(rx.first == ry.first)
                    ans = rx.second/ry.second;
                else
                    ans = -1.0;
                result.push_back(ans);
            }
            return result;
    }
    pair<string, double>find(string A, unordered_map<string, pair<string, double>> &g){
            if(A!= g[A].first){
                auto p = find(g[A].first, g);
                g[A].first = p.first;
                g[A].second *= p.second;
            }
            return g[A]; 
        }
};
