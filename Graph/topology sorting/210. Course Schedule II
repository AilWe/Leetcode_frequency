210. Course Schedule II
There are a total of n courses you have to take labelled from 0 to n - 1.

Some courses may have prerequisites, for example, if prerequisites[i] = [ai, bi] this means you must take the course bi before the course ai.

Given the total number of courses numCourses and a list of the prerequisite pairs, return the ordering of courses you should take to finish all courses.

If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.
//Topological sorting
//T/S: O(V+E) ~ O(V^2)
//DFS, add the node the visited array before popping the stack.
//If a node is already added to visited, then there is a cycle
//Ans is the reverse of the visited array
class Solution {
public:
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        vector<vector<int>> graph(numCourses);
        for(const auto &p: prerequisites)
            graph[p[1]].push_back(p[0]);
        
        // states: 0 = unknown, 1 = visiting, 2 = visited
        vector<int> v(numCourses, 0);
        vector<int> ans;
        
        for(int i = 0; i< numCourses; ++i)
            if (dfs(i, graph, v, ans)) return {};
        
        reverse(ans.begin(), ans.end());
        return ans;
    }
private:
    bool dfs(int cur, vector<vector<int>> &graph, vector<int> &v, vector<int> &ans){
        if(v[cur] == 1) return true;
        if(v[cur] == 2) return false;
        
        v[cur] = 1;
        
        for(const int t: graph[cur])
            if(dfs(t, graph, v, ans)) return true;
        
        v[cur] = 2;
        ans.push_back(cur);
        
        return false;
    }
};
