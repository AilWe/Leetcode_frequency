/*145. Binary Tree Postorder Traversal Given the root of a binary tree, return the postorder traversal of its nodes' values.*/
class Solution {
public:
    void postorderTraversal(TreeNode* root, vector<int> &ans){
        if(root == NULL) return;
        if(root->left)
            postorderTraversal(root->left, ans);
        if(root->right)
            postorderTraversal(root->right, ans);
        ans.push_back(root->val);
    }
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> ans;
        postorderTraversal(root, ans);
        return ans;
    }
};
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        if(root==NULL) return {};
        deque<int> ans;
        TreeNode* curr = NULL;
        stack<TreeNode*> s;
        s.push(root);
        while(!s.empty()){
            curr = s.top();
            ans.push_front(curr->val);
            s.pop();
            if(curr->left)
                s.push(curr->left);
            if(curr->right)
                s.push(curr->right);
        }
        return vector<int> (ans.begin(),ans.end());
    }
};
