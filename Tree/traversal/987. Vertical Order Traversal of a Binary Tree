987. Vertical Order Traversal of a Binary Tree
Given a binary tree, return the vertical order traversal of its nodes values.

For each node at position (X, Y), its left and right children respectively will be at positions (X-1, Y-1) and (X+1, Y-1).

Running a vertical line from X = -infinity to X = +infinity, whenever the vertical line touches some nodes, we report the values of the nodes in order from top to bottom (decreasing Y coordinates).

If two nodes have the same position, then the value of the node that is reported first is the value that is smaller.

Return an list of non-empty reports in order of X coordinate.  Every report will have a list of values of nodes.
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
//T: O(nlogn)S:O()
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        if(root == NULL) return {};
        int min_x =INT_MAX;
        int max_x = INT_MIN;
        map<pair<int, int>,set<int>> h; //{y,x}->{vals}
        traverse(root, 0,0,h, min_x, max_x);
        vector<vector<int>> ans(max_x-min_x+1);
        for(const auto &m: h){
            int x = m.first.second - min_x;
            ans[x].insert(ans[x].end(), m.second.begin(), m.second.end());
        }
        return ans;
    }
private:
    void traverse(TreeNode* root, int x, int y, map<pair<int, int>, set<int>> &h, int &min_x, int &max_x){
        if(root == NULL) return;
        min_x = min(min_x, x);
        max_x = max(max_x, x);
        h[{y,x}].insert(root->val);
        traverse(root->left, x-1, y+1, h, min_x, max_x);
        traverse(root->right, x+1, y+1, h, min_x, max_x);
    }
};
