113. Path Sum II
Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

Note: A leaf is a node with no children.
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int sum) {
        vector<vector<int>> ans;
        vector<int> curr;
        path(root, sum, ans, curr);
        return ans;
    }
    void path(TreeNode* root, int sum, vector<vector<int>> &ans, vector<int> &curr){
        if(root == NULL) return;
        if(root->left == NULL && root->right == NULL){
            if(root->val == sum) {
                //curr.push_back(root->val);
                ans.push_back(curr);
                ans.back().push_back(root->val);
                
                
            }
            return;
        }
        //if(sum < root->val) return; case has negative number
        curr.push_back(root->val);
        path(root->left, sum-root->val, ans, curr);
        path(root->right, sum-root->val, ans, curr);
        curr.pop_back();
    }
};
