437. Path Sum III
You are given a binary tree in which each node contains an integer value.

Find the number of paths that sum to a given value.

The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes).

The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.
class Solution {
public:
    int pathSum(TreeNode* root, int sum) {
        if(!root)  return 0;
        return numberOfPaths(root, sum) + pathSum(root->left, sum) + pathSum(root->right, sum);
    }
private:
    int numberOfPaths(TreeNode* root, int left){
        if(!root) return 0;
        left = left - root->val;
        return (left == 0? 1:0) + numberOfPaths(root->left, left) + numberOfPaths(root->right,left);
    }
};
class Solution {
public:
    int pathSum(TreeNode* root, int sum) {
        if(!root)  return 0;
        return numberOfPaths(root, sum) + pathSum(root->left, sum) + pathSum(root->right, sum);
    }
private:
    int numberOfPaths(TreeNode* root, int sum){
        if(!root) return 0;
        return (root->val == sum? 1:0) + numberOfPaths(root->left, sum-root->val) + numberOfPaths(root->right,sum-root->val);
    }
};
//Running Prefix Sum
Time complexity: O(n)

Space complexity: O(h)
class Solution {
public:
    int pathSum(TreeNode* root, int sum) {
        ans_ = 0;
        sums_ = {{0,1}};
        pathSum(root, 0, sum);
        return ans_;
    }
private:
    int ans_;
    unordered_map<int, int> sums_;
    
    void pathSum(TreeNode* root, int cur, int sum){
        if(!root) return;
        cur+=root->val;
        ans_+= sums_[cur - sum];
        ++sums_[cur];
        pathSum(root->left, cur, sum);
        pathSum(root->right, cur, sum);
        --sums_[cur];
    }
};
