129. Sum Root to Leaf Numbers
Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.

An example is the root-to-leaf path 1->2->3 which represents the number 123.

Find the total sum of all root-to-leaf numbers.

Note: A leaf is a node with no children.
class Solution {
public:
    int sumNumbers(TreeNode* root) {
        int sum = 0;
        int total = 0;
        Sum(root, sum, total);
        return total;
        
    }
    void Sum(TreeNode* root, int &sum, int &total){
        if(root == NULL) return;
        if(root->left == NULL && root->right == NULL) {
            total = total+sum*10+root->val;
            return;
        };
        sum = sum*10+root->val;
        Sum(root->left, sum, total);
        Sum(root->right, sum, total);
        sum = (sum-root->val)/10;
    } 
};
//T: O(n); S:O(n)
class Solution {
public:
    int sumNumbers(TreeNode* root) {
        int ans = 0;
        traverse(root, ans, 0);
        return ans;
    }
    void traverse(TreeNode* root, int &ans, int num){
        if(root == NULL) return;
        num = num*10+root->val;
        if(root->left || root->right){
            traverse(root->left, ans, num);
            traverse(root->right, ans, num);
        }
        else{
           ans += num;
           return;
        }
    }
};
class Solution {
public:
    int sumNumbers(TreeNode* root) {
        int ans = 0;
        traverse(root, ans, 0);
        return ans;
    }
    void traverse(TreeNode* root, int &ans, int num){
        if(root == NULL) return;
        num = num*10+root->val;
        if(!root->left && !root->right)
            ans += num;
        else{
            traverse(root->left, ans, num);
            traverse(root->right, ans, num);
        }
            
    }
};
