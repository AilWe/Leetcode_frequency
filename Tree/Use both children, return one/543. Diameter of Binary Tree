543. Diameter of Binary Tree
Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.
LP(root) = max path length that passes root and at most one of its child

if root is None:
  LP(root) = -1;
else:
  LP(root) = 1+ max(LP(root.left), LP(root.right))

ans = max{2+LP(root.left)+LP(root.right)}

//T: O(n) S:O(H)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int diameterOfBinaryTree(TreeNode* root) {
        if(root == NULL) return 0;
        int ans = 0;
        int height = helper(root, ans);
        return ans-1;
    }
    int helper(TreeNode* root, int &ans){
        if(root == NULL) return 0;
        int ld = helper(root->left, ans);
        int rd = helper(root->right, ans);
        int sum = ld+rd+1;
        ans = max(ans, sum);
        return max(ld, rd)+1;
    }
}; 
