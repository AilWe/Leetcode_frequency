102. Binary Tree Level Order Traversal
Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> ans;
        preorder(root, 0, ans);
        return ans;
    }
    void preorder(TreeNode* root, int d, vector<vector<int>> &ans){
        if (root == NULL) return;
        while (d>=ans.size()){
            ans.push_back({});
        }
        ans[d].push_back(root->val);
        preorder(root->left, d+1, ans);
        preorder(root->right, d+1, ans);
    }
};
T: O(n) S:O(n)
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        if(root == NULL) return {};
        vector<vector<int>> ans;
        queue <TreeNode*> q;
        TreeNode* curr = NULL;
        int depth = 0;
        q.push(root);
        while(!q.empty()){
            int size = q.size();
            if(depth >= ans.size()){
                ans.push_back({});
            }
            while(size--){
                curr = q.front();
                q.pop();
                ans[depth].push_back(curr->val);
                if(curr->left) q.push(curr->left);
                if(curr->right) q.push(curr->right);
            }
            ++depth;
        }
        return ans;
    }
};
