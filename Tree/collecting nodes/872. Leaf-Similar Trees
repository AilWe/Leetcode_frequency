872. Leaf-Similar Trees
Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence.
For example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8).

Two binary trees are considered leaf-similar if their leaf value sequence is the same.

Return true if and only if the two given trees with head nodes root1 and root2 are leaf-similar.
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        vector<int> ans1;
        vector<int> ans2;
        findleaf1(root1, ans1);
        findleaf2(root2, ans2);
        if(ans1.size() != ans2.size()) return false;
        for(int i = 0; i< ans1.size(); i++){
            if(ans1[i]!=ans2[i]) return false;
        }
        return true;
    }
    void findleaf1(TreeNode* root1, vector<int> &ans1){
        if(root1 == NULL) return;
        if(!root1->left&&!root1->right){
            ans1.push_back(root1->val);
        }
        findleaf1(root1->left, ans1);
        findleaf1(root1->right, ans1);
    }
    void findleaf2(TreeNode* root2, vector<int> &ans2){
        if(root2 == NULL) return;
        if(!root2->left&&!root2->right){
            ans2.push_back(root2->val);
        }
        findleaf2(root2->left, ans2);
        findleaf2(root2->right, ans2);
    }
};
