912. Sort an Array
Given an array of integers nums, sort the array in ascending order.
//quicksort
class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
        quickSort(nums, 0,nums.size()-1);
        return nums;
    }
    void quickSort(vector<int> &nums, int l, int r){
        if(l>=r) return;
        int i = l;
        int j = r;
        int p = nums[l+rand()%(r-l+1)];//pick a random number as pivot
        while(i<= j){
            while(nums[i] < p) ++i;//if nums[i]<p, increase index i
            while(nums[j]>p) --j;//if(nums[j]>p), decrease index j
            if(i<=j)//如果大的在左，小的在右，则交换
                swap(nums[i++],nums[j--]);
        }
        quickSort(nums, l, j);
        quickSort(nums, i, r);
    }
};
//count sort
class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
        auto [min_it, max_it] = minmax_element(nums.begin(), nums.end());
        int l = *min_it;
        int r = *max_it;
        vector <int> count(r-l+1);
        for(auto n: nums){
            ++count[n-l];
        }
        int index = 0;
        vector<int> ans;
        for(int i = 0; i< count.size();++i){
            while(count[i]>0){
                ans.push_back(i+l);
                --count[i];
            }        
        }
        return ans;
    }
};
//heapsort
class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {//从大到小排
        priority_queue<int> q(nums.begin(), nums.end());
        deque<int> ans;
        while(!q.empty()){
            ans.push_front(q.top());
            q.pop();
        }
        return vector<int> (ans.begin(), ans.end());
    }
};
//mergesort

class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
        vector<int> t(nums.size());
        mergesort(nums, t, 0, nums.size());
        return nums;
    }
    void mergesort(vector<int> &nums, vector<int> &t, int l, int r){//这里t不给引用会超时
        if(l+1>=r) return;
        int m = l+(r-l)/2;
        mergesort(nums,t,l, m);
        mergesort(nums, t, m, r);
        int i1 = l;
        int i2 = m;
        int index = 0;
        while(i1<m || i2< r){
            if(i2 == r ||(i1<m && nums[i1] < nums[i2])){
                t[index++] = nums[i1++];
            }
            else{
                t[index++] = nums[i2++];
            }
        }
        copy(t.begin(), t.begin()+index, nums.begin()+l);
        
    }
};
