//divide and conquer
分成两半，有一半排序过
findMin(array)
    if is_sorted(array):
        return array[0];
    return min(finMin(array[0:mid-1]). findMin(array[mid:n]))    
 例 4567012
 456（sort） 7012（no sort）
 4,        70(no sort),               12(sort)
 4,             0,                      1
 //Time Complexity: O(logn)
 //Space: 用指针，O（logn）
 class Solution {
private: 
    int findMin(const vector<int> &nums, int l, int r){
        //only one or two number left
        if(l+1>=r) return min(nums[l],nums[r]);
        //sorted, could <=
        if(nums[l]<=nums[r]) return nums[l];
        
        int mid = l + (r-l)/2;
        return min(findMin(nums, l, mid-1), findMin(nums, mid, r));
    }
public:
    int findMin(vector<int>& nums) {
        int l = 0;
        int r = nums.size()-1;
        int ans = findMin(nums, l, r);
        return ans;
        
        
    }
};
//Transverse to find the minimum number
//T: O(n)
class Solution {
public:
    int findMin(vector<int>& nums) {
        int min = INT_MAX;
        for (int i = 0; i< nums.size(); i++){
            if(nums[i]<min)
                min = nums[i];
        }
        return min;
        
    }
};
//sort then find
//T:O(n*logn)
class Solution {
public:
    int findMin(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        return nums[0];
        
    }
};
