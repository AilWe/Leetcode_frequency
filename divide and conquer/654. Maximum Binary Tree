//use pointer
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* makeMBT(vector<int>& nums, int begin, int end) {
        if(begin>=end) return NULL;
        auto val = max_element(nums.begin()+begin,nums.begin()+end);
        TreeNode* root = new TreeNode(*val);
        int index = val - nums.begin();
        root->left = makeMBT(nums,begin,index);
        root->right = makeMBT(nums,index+1,end);
        return root;
    }
     TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
         return makeMBT(nums, 0, nums.size());
     }
};
//normal method
//Time: O(nlogn)~O(n^2) -> 取决于递归深度
//Space: O(nlogn)~O(n^2) 
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        if(nums.empty()) return NULL;
        //O(n)||nums||
        auto val = max_element(nums.begin(),nums.end());
        TreeNode* root = new TreeNode(*val);
        vector<int> left(nums.begin(), val);
        vector<int> right(val+1, nums.end());
        root->left = constructMaximumBinaryTree(left);
        root->right = constructMaximumBinaryTree(right);
        return root;
    }
};
