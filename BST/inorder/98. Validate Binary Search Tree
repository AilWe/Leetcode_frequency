98. Validate Binary Search Tree
Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
//Solution1: limit the value range for the sub trees
//左子树比根小，右子树比根大
class Solution {
    private:
    bool isValidBST(TreeNode* root, long maxValue, long minValue){
        if(root == NULL) return true;
        if(root->val >= maxValue || root->val <= minValue) return false;
        return isValidBST(root->left, root-> val, minValue) && isValidBST(root->right, maxValue, root->val);
    }
public:
    bool isValidBST(TreeNode* root) {
        return isValidBST(root, LLONG_MAX, LLONG_MIN);
        
    }
};
//避免hardcode，用指针
class Solution {
    private:
    bool isValidBST(TreeNode* root, int* maxValue, int* minValue){
        if(root == NULL) return true;
        if((maxValue && root->val >= *maxValue) || (minValue && root->val <= *minValue)) return false;
        return isValidBST(root->left, &root-> val, minValue) && isValidBST(root->right, maxValue, &root->val);
    }
public:
    bool isValidBST(TreeNode* root) {
        return isValidBST(root, nullptr, nullptr);
        
    }
};
