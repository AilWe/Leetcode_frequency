501. Find Mode in Binary Search Tree
Given a binary search tree (BST) with duplicates, find all the mode(s) (the most frequently occurred element) in the given BST.

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than or equal to the node's key.
The right subtree of a node contains only nodes with keys greater than or equal to the node's key.
Both the left and right subtrees must also be binary search trees.

class Solution {
public:
    vector<int> findMode(TreeNode* root) {
        inorder(root);
        return ans_;
    }
    int val_ = 0;
    int count_ = 0;
    int max_count_ = 0;
    vector<int> ans_;
    void inorder(TreeNode *root){
        if(root == NULL) return;
        inorder(root->left);
        visit(root->val);
        inorder(root->right);
    }
    void visit(int val){
        if(count_>0 && val == val_)
            ++count_;
        else{
            val_ = val;
            count_=1;
        }
        if(count_> max_count_){
            max_count_ = count_;
            ans_.clear();
        }
        if(count_==max_count_)
            ans_.push_back(val);
    }
};
