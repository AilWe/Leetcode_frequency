/*Given an array where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.
Given the sorted array: [-10,-3,0,5,9],
Time complexity: O(N) since each node visit once
Space complexity: O(N) to keep the output, O(logN) for the recursive stack
*/
//Preorder Traversal: Always Choose Left Middle Node as a Root
#include <iostream>
#include <vector>
using namespace std;
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(): val(0), left(nullptr), right(nullptr){}
    TreeNode(int x): val(x), left(nullptr), right(nullptr){}
};

class Solution {
public:
    TreeNode* newTree(int left, int right, vector<int>& nums){
        if (left > right) return NULL;
        //always choose left middle as a root
        int p = (left+right)/2;
        //Preorder traversal: node -> left -> right
        TreeNode *root = new TreeNode(nums[p]);
        root -> left = newTree(left, p-1, nums);
        root -> right = newTree(p+1, right, nums);
        return root;
    }
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        return newTree(0, nums.size()-1, nums);
    }

};
//Driven
int main(){
    Solution a;
    vector <int> nums = {-10,-3,0,5,9};
    TreeNode* address = a.sortedArrayToBST(nums);
    std::cout << address << std::endl;
}
//Preorder Traversal: Always Choose Right Middle Node as a Root
//
Approach 3: Preorder Traversal: Choose Random Middle Node as a Root
