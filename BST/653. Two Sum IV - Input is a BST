/*Given the root of a Binary Search Tree and a target number k, return true if there exist two elements in the BST such that their sum is equal to the given target.*/
//recursivve
class Solution {
public:
    set<int>s;
    bool findTarget(TreeNode* root, int k) {
        if(root==NULL)
            return false;
        if(s.find(k-root->val)==s.end())
            s.insert(root->val);
        else
            return true;
        return findTarget(root->left, k) || findTarget(root->right, k);
    }
};
//bsf + bruteforce
class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        if(root == NULL||((root->left == NULL) && (root ->right == NULL)))
            return false;
        queue <TreeNode*> s1,s2;
        s1.push(root);
        
        TreeNode* curr1 = nullptr;
        TreeNode* curr2 = nullptr;
        while (!s1.empty()){
            curr1 = s1.front();
            s1.pop();
            s2.push(root);
            while(!s2.empty()){
                curr2 = s2.front();
                s2.pop();
                if(curr1 && curr2 && curr1->val != curr2->val && curr1 -> val + curr2 -> val == k){
                    return true;
                }
                if (curr2){
                    s2.push(curr2 -> left);
                    s2.push(curr2 -> right);
                }
            }
            if (curr1){
                s1.push(curr1 -> left);
                s1.push(curr1 -> right);  
            }
        }
        return false;       
    }
};
//hashtable
class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        if(root == NULL||((root->left == NULL) && (root ->right == NULL)))
            return false;
        queue <TreeNode*> s1;
        unordered_map <int, int> mp;
        s1.push(root);
        TreeNode* curr1 = nullptr;
        int count = 1;
        while (!s1.empty()){
            curr1 = s1.front();
            s1.pop();
            if(curr1 && mp.find(k - curr1->val) != mp.end()){
                return true;
            }
            if (curr1)
                mp[curr1->val] = count;  
            if (curr1){
                s1.push(curr1 -> left);
                s1.push(curr1 -> right);  
            }
            count++;
        }
        return false;       
    }
};
//make a vector first
class Solution {
    vector <int> vt;
public:
    vector<int> inorder(TreeNode* root){
        if(root == NULL)
            return {};
        inorder(root->left);
        vt.push_back(root->val);
        inorder(root->right);
        return vt;
    }
    
    bool findTarget(TreeNode* root, int k) {
        vector <int> vt;
        vt = inorder(root);
        //for(int i = 0; i < vt.size(); i++)
        //    cout << vt[i]<<endl;
        int l = 0, r = vt.size()-1;
        while(l<r){
            if(vt[l]+vt[r] == k)
                return true;
            if (vt[l]+vt[r]> k)
                r--;
            if(vt[l]+vt[r]< k)
                l++;
            
        }
        return false;
        
    }
};
