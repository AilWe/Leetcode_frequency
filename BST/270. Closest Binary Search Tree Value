/*
Given a non-empty binary search tree and a target value, find the value in the BST that is closest to the target.
*/
//simple recursive
class Solution {
    float diffmin = FLT_MAX;
    int rootdf = -1;
public:
    int closestValue(TreeNode* root, double target) {
        if(root->left)
            closestValue(root->left, target);
        float diff = abs(root->val - target);
        if(diff <= diffmin){
            diffmin = diff;
            rootdf = root-> val;
            //cout << diffmin;
            //cout << root->val;
        }
        if(root -> right)
            closestValue(root -> right, target);
        return rootdf;
    }
};
//vector
//bsf
class Solution {
public:
    int closestValue(TreeNode* root, double target) {
        //bfs
        queue <TreeNode*> q;
        q.push(root);
        TreeNode* curr = nullptr;
        float mindif = FLT_MAX;
        int nodevalue = -1;
        while(!q.empty()){
            curr = q.front();
            q.pop();
            if(curr != NULL){
                float diff = abs(curr->val - target);
                if(diff<mindif){
                    mindif = diff;
                    nodevalue = curr->val;
                }
            }
            if(curr->left != NULL)
                q.push(curr->left);
            if(curr->right != NULL)
            q.push(curr->right);
        }
        return nodevalue;
    }
};
