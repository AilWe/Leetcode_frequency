/*
Given a non-empty binary search tree and a target value, find the value in the BST that is closest to the target.
*/
//Binary search
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int closestValue(TreeNode* root, double target) {
        int val;
        int closest = root->val;
        while(root!=NULL){
            val = root->val;
            closest = abs(val-target)< abs(closest-target)? val : closest;
            root = target < root->val? root->left: root->right;
        }
        return closest;
    }
};
//simple recursive
class Solution {
    float diffmin = FLT_MAX;
    int rootdf = -1;
public:
    int closestValue(TreeNode* root, double target) {
        if(root->left)
            closestValue(root->left, target);
        float diff = abs(root->val - target);
        if(diff <= diffmin){
            diffmin = diff;
            rootdf = root-> val;
            //cout << diffmin;
            //cout << root->val;
        }
        if(root -> right)
            closestValue(root -> right, target);
        return rootdf;
    }
};
//vector
//bsf
class Solution {
public:
    int closestValue(TreeNode* root, double target) {
        //bfs
        queue <TreeNode*> q;
        q.push(root);
        TreeNode* curr = nullptr;
        float mindif = FLT_MAX;
        int nodevalue = -1;
        while(!q.empty()){
            curr = q.front();
            q.pop();
            if(curr != NULL){
                float diff = abs(curr->val - target);
                if(diff<mindif){
                    mindif = diff;
                    nodevalue = curr->val;
                }
            }
            if(curr->left != NULL)
                q.push(curr->left);
            if(curr->right != NULL)
            q.push(curr->right);
        }
        return nodevalue;
    }
};
//optimization of recursive
class Solution {
    double diff2 = FLT_MAX;
    double diff1 = FLT_MAX;
    TreeNode* prev = nullptr;
    int rootdf = -1;
    double prediff = FLT_MAX;
    int flag = 0;
public:
    void closestvaluehelper(TreeNode* root, double target){
        if(root->left)
            closestvaluehelper(root->left, target);
        double diff1 = abs(root->val - target);
        //cout <<"1:"<< diff1 << " " ;
        if(prev != NULL){
            if(diff1> prediff){
                //cout <<"3:"<< prev ->val<<" ";
                rootdf = prev-> val;
                flag =1;
                return;
            }
        }
        if(diff1 < diff2){
            diff2 = diff1;
            rootdf = root-> val;
        }
        prediff = diff1;  
        //cout << "2:" << prediff << " ";
        prev=root;
        //cout << root -> val;
        if(root->left == NULL && root->right ==NULL && flag == 0){
            rootdf = root->val;
            return;
        }
        if(root -> right)
            closestvaluehelper(root -> right, target);
    }
    int closestValue(TreeNode* root, double target) {
        closestvaluehelper(root, target);
        return rootdf;
    }
};
