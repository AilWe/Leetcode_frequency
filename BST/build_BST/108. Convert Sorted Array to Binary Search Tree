/*Given an array where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.
Given the sorted array: [-10,-3,0,5,9],
Time complexity: O(N) since each node visit once
Space complexity: O(N) to keep the output, O(logN) for the recursive stack
*/
class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        return sortedArrayToBST(nums, 0, nums.size());
    }
    TreeNode* sortedArrayToBST(vector<int> &nums, int l, int r){
        if(l >= r) return NULL;//左开右闭，所以左边无法等于右边
        int m = l +(r-l)/2;
        //cout << l << r << m <<endl;
        TreeNode* root = new TreeNode(nums[m]);
        root->left = sortedArrayToBST(nums,l,m);
        root -> right = sortedArrayToBST(nums,m+1,r);
        return root;
    }
};
//inorder Traversal: Always Choose Left Middle Node as a Root
#include <iostream>
#include <vector>
using namespace std;
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(): val(0), left(nullptr), right(nullptr){}
    TreeNode(int x): val(x), left(nullptr), right(nullptr){}
};

class Solution {
public:
    TreeNode* newTree(int left, int right, vector<int>& nums){
        if (left > right) return NULL;
        //always choose left middle as a root
        int p = (left+right)/2;
        //inorder traversal:  left -> root -> right
        TreeNode *root = new TreeNode(nums[p]);
        root -> left = newTree(left, p-1, nums);
        root -> right = newTree(p+1, right, nums);
        return root;
    }
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        return newTree(0, nums.size()-1, nums);
    }

};
//Driven
int main(){
    Solution a;
    vector <int> nums = {-10,-3,0,5,9};
    TreeNode* address = a.sortedArrayToBST(nums);
    std::cout << address << std::endl;
}
//inorder Traversal: Always Choose Right Middle Node as a Root
#include <iostream>
#include <vector>
using namespace std;
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(): val(0), left(nullptr), right(nullptr){}
    TreeNode(int x): val(x), left(nullptr), right(nullptr){}
};
class Solution {
public:
    TreeNode* newTree(int left, int right, vector<int> & nums){
        if (left > right) return NULL;
        // always choose left middle as a root
        int rightmiddle = (left + right)/2;
        if((left+right) % 2 == 1) ++rightmiddle;
        TreeNode *rt =  new TreeNode(nums[rightmiddle]);
        //inorder traversal: left-> node -> right
        rt -> left = newTree(left, rightmiddle-1, nums);
        rt -> right = newTree(rightmiddle+1, right, nums);
        return rt;
    }
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        int left = 0;
        int right = nums.size() - 1;
        return newTree(left, right, nums);
    }
};


//Driven
int main(){
    Solution a;
    vector <int> nums = {-10,-3,0,5,9};
    TreeNode* address = a.sortedArrayToBST(nums);
    std::cout << address << std::endl;
}
//
Approach 3: inorder Traversal: Choose Random Middle Node as a Root
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* newTree(int left, int right, vector<int> & nums){
        if (left > right) return NULL;
        // always choose left middle as a root
        int randommiddle = (left + right)/2;
        if((left+right) % 2 == 1) randommiddle+= rand()%2;
        TreeNode *rt =  new TreeNode(nums[randommiddle]);
        //inorder traversal: left-> node -> right
        rt -> left = newTree(left, randommiddle-1, nums);
        rt -> right = newTree(randommiddle+1, right, nums);
        return rt;
    }
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        int left = 0;
        int right = nums.size() - 1;
        return newTree(left, right, nums);
    }
};

