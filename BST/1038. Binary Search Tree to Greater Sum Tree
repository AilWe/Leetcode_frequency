/* 
Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.

As a reminder, a binary search tree is a tree that satisfies these constraints:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
Note: This question is the same as 538: https://leetcode.com/problems/convert-bst-to-greater-tree/
*/
//recursive
class Solution {
public:
    //dfs rihgt first, then middle, then left
    int sum;
    TreeNode* bstToGst(TreeNode* root) {
        if (root == NULL)
            return 0; 
        bstToGst(root->right);
        sum = sum + root -> val;
        root->val = sum;
        bstToGst(root->left);
        
        return root;
    }
};
//iterative ??
class Solution {
public:
    TreeNode* bstToGst(TreeNode* root) {
        TreeNode* temp = root;
        vector<int> ans;
        stack<TreeNode *> s;

        while (root != NULL || s.empty() == false){ 
            while (root !=  NULL){ 
                s.push(root); 
                root = root->left; 
            } 
            root = s.top(); 
            s.pop(); 
            ans.push_back(root->val);
            root = root->right; 
        }
        root = temp;
        int i=0;
        while (root != NULL || s.empty() == false){ 
            while (root !=  NULL){ 
                s.push(root); 
                root = root->left; 
            } 
            root = s.top(); 
            s.pop(); 
            root->val = accumulate(ans.begin()+i, ans.end(), 0);
            i++;
            root = root->right; 
        }
        return temp;
    }
};
