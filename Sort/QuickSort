Sort an Array

/*(1)首先设定一个分界值，通过该分界值将数组分成左右两部分。
(2)将大于或等于分界值的数据集中到数组右边，小于分界值的数据集中到数组的左边。此时，左边部分中各元素都小于或等于分界值，而右边部分中各元素都大于或等于分界值。 
(3)然后，左边和右边的数据可以独立排序。对于左侧的数组数据，又可以取一个分界值，将该部分数据分成左右两部分，同样在左边放置较小值，右边放置较大值。右侧的数组数据也可以做类似处理。 
(4)重复上述过程，可以看出，这是一个递归定义。通过递归将左侧部分排好序后，再递归排好右侧部分的顺序。当左、右两个部分各数据排序完成后，整个数组的排序也就完成了。*/
//Time complexity: O(nlogn) ~ O(n^2)
//Space complexity: O(logn) ~ O(n)
class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
        quicksort(nums, 0, nums.size()-1);
        return nums;
    }
    void quicksort(vector<int> &nums, int l, int r){
        if(l>=r) return;
        int i = l;
        int j = r;
        int p = nums[l+(r-l)/2];
        while(i <= j){
            while(nums[i]<p) ++i;
            while(nums[j]>p) --j;
            if(i <= j){
                swap(nums[i++], nums[j--]);
            }
        }
        quicksort(nums,l,j);//再次i++，j--后，i在j右边
        quicksort(nums,i,r);
    }
};
