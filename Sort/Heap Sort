/*
堆排序（英语：Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。
*/
class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
        priority_queue<int> q(begin(nums), end(nums));
        int i = nums.size();
        while(!q.empty()){
            nums[--i] = q.top();
            q.pop();
        }
        return nums;
    }
};
class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
        const int n = nums.size();
    //Init heap
        for(int i = n/2; i>=0; i--)
            heapify(nums, i, n-1);
    //Get min
        for (int i = n-1; i>=1; i--){
            swap(nums[0],nums[i]);
            heapify(nums,0, i-1);
        }
        return nums;
        
    }
       void heapify(vector<int> &nums, int i, int e){
           while (i<=e){
                int l = 2*i + 1; //left = 2*i+1
                int r = 2*i + 2; //right = 2*i+2
                //if left child is larger than root
                int lar = i; // j is largest 
                if(l<=e && nums[l]> nums[lar])
                    lar = l;
                //if right child is larger than largest
                if(r<=e && nums[r] > nums[lar])
                    lar = r;
                if(lar == i) break; 
                // If largest is not root;
                swap(nums[i], nums[lar]);
                swap(i, lar);
            }
        }
   
};
