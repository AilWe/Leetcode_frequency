74. Search a 2D Matrix
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        if(matrix.empty()) return false;
        int l = 0;
        int r = matrix.size() * matrix[0].size();
        const int cols = matrix[0].size();
        while(l<r){
            const int m = l+(r-l)/2;
            if(matrix[m/cols][m%cols] == target) return true;
            else if(matrix[m/cols][m%cols] > target)
                r = m;
            else
                l = m+1;
        }
        return false;
    }
};
