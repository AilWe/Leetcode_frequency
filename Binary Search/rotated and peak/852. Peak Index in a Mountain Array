Let's call an array arr a mountain if the following properties hold:

arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... arr[i-1] < arr[i]
arr[i] > arr[i+1] > ... > arr[arr.length - 1]
Given an integer array arr that is guaranteed to be a mountain, return any i such that arr[0] < arr[1] < ... arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1].
// T: O(logn) S:O(1)
class Solution {
public:
    int peakIndexInMountainArray(vector<int>& arr) {
        return bs(arr, 0, arr.size()-1);
    }
    int bs(vector<int> &arr, int l, int r){
        if(l == r) return l;
        int m = l+(r-l)/2;
        if(arr[m]> arr[m+1])
            return bs(arr, l, m);
        return bs (arr, m+1, r);
    }
};
class Solution {
public:
    int peakIndexInMountainArray(vector<int>& arr) {
        return bs(arr, 0, arr.size()-1);
    }
    int bs(vector<int> &arr, int l, int r){
        while(l<r){
            int m = l+(r-l)/2;
            if(arr[m]< arr[m+1])
                l = m+1;
            else
                r = m;
        }
        return r;
    }
};
//Linear scan T: O(n) S:O(1)
class Solution {
public:
    int peakIndexInMountainArray(vector<int>& arr) {
        return max_element(arr.begin(), arr.end())-arr.begin();
    }
};
