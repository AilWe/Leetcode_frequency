81. Search in Rotated Sorted Array II
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).

You are given a target value to search. If found in the array return true, otherwise return false.
class Solution {
public:
    bool search(vector<int>& nums, int target) {
        if(nums.size() == 0) return false;
        return divide(nums, target, 0, nums.size()-1);
    }
    bool bs(vector<int> &nums, int target, int l, int r){
        while(l<r){
            int m = l +(r-l)/2;
            if(target == nums[m]) return true;
            else if(target < nums[m]) r=m;
            else l = m+1;
        }
        return false;
    }
    bool divide(vector<int> &nums, int target, int l, int r){
        if (l+1>=r){
            if(nums[l] == target) return true;
            if(nums[r] == target) return true;
            return false;
        }
        if(nums[l]<nums[r]){
            return bs(nums, target, l, r+1);
        }
        int m = l+(r-l)/2;
        if(nums[m] == target) return true;
        return(divide(nums, target, l, m-1) || divide(nums, target, m+1, r));
    }
};
