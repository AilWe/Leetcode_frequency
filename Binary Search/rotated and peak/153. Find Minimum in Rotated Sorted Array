153. Find Minimum in Rotated Sorted Array
Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums, return the minimum element of this array.
class Solution {
public:
    int findMin(vector<int>& nums) {
        int l = 0;
        int r = nums.size() - 1;
        return divide(nums, l, r);
    }
    int divide(vector<int> & nums, int l, int r){
        if(l+1>=r){
            return min(nums[l], nums[r]);
        }
        if(nums[l] < nums[r])
            return nums[l];
        int m = l+(r-l)/2;
        return min(divide(nums, l, m-1), divide(nums,m,r));
    }
};
