Template [l, r)
def binary_search[l,r):
  while l < r:
    m = l+(r-l)//2
    if f(m): return m # optional
    if g(m):
      r = m # new range[1,m)
    else:
      l = m+1 # new range[m+1,r)
    return l# or not found
 Time complexity: O(log(r-1)*(f(m)+g(m)))
 Space complexity: O(1)
 def bs(A, val, l, r):
  while l<r:
  m = l+(r-l)//2
  if A[m] == val: return m
  if A[m] >= val: #g(m)
    r = m
  else
   l=m+1
  return -1 if not found
 //左闭
 def lower_bound(A, val, l, r):
  while l<r:
  m = l+(r-l)//2
  if A[m] >= val: #g(m)
    r = m
  else
   l=m+1
  return l
  //右开
  def upper_bound(A, val, l, r):
  while l<r:
  m = l+(r-l)//2
  if A[m] > val: #g(m)
    r = m
  else
   l=m+1
  return l
  
  
