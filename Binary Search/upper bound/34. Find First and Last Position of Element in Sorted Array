34. Find First and Last Position of Element in Sorted Array
Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].
//
class Solution {
    vector <int> ans = {-1,-1};
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int start = 0;
        int end = nums.size() - 1;
        if(nums.size() == 0) return{-1,-1} ;
        dfs(nums, target, start, end);
        return ans;
    }
    void dfs(vector<int> &nums, int target, int l, int r){
        int mid = l+(r-l)/2;
        if(target == nums[mid]){
            int lowbound = mid;
            int highbound = mid;
            while(nums[lowbound]==nums[mid]){
                lowbound--;
                if(lowbound == -1) break;
            }
            
            while(nums[highbound]==nums[mid]){
                highbound++;
                if(highbound == nums.size()) break;
            }
            ans[0] = (lowbound+1);
            ans[1] = (highbound-1);
            return;
        }
        if(l>=r){
            ans = {-1,-1};
            return;
        }
        if(target < nums[mid]){
            dfs(nums, target, l, mid-1);
        }
        else if(target > nums[mid]){
            dfs(nums, target, mid+1, r);
        }
    }
};
