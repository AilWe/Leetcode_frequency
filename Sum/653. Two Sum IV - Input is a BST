/*
Given the root of a Binary Search Tree and a target number k, return true if there exist two elements in the BST such that their sum is equal to the given target.
*/
//brute force
#include <iostream>
#include <vector>
#include <queue>
using namespace std;
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(): val(0), left(nullptr), right(nullptr){}
    TreeNode(int x): val(x), left(nullptr), right(nullptr){}
};
class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        if(root == NULL||((root->left == NULL) && (root ->right == NULL)))
            return false;
        queue <TreeNode*> s1,s2;
        s1.push(root);

        TreeNode* curr1 = nullptr;
        TreeNode* curr2 = nullptr;
        while (!s1.empty()){
            curr1 = s1.front();
            s1.pop();
            s2.push(root);
            while(!s2.empty()){
                curr2 = s2.front();
                s2.pop();
                if(curr1 && curr2 && curr1->val != curr2->val && curr1 -> val + curr2 -> val == k){
                    return true;
                }
                if (curr2){
                    s2.push(curr2 -> left);
                    s2.push(curr2 -> right);
                }
            }
            if (curr1){
                s1.push(curr1 -> left);
                s1.push(curr1 -> right);
            }
        }
        return false;
    }
};


//Driven
int main(){
    auto rt = new TreeNode(5);
    rt -> left = new TreeNode (3);
    rt -> right = new TreeNode (6);
    rt -> left ->left = new TreeNode(2);
    rt -> left -> right =new TreeNode (4);
    rt -> right -> right = new TreeNode(7);
    int k = 9;
    Solution a;
    bool output = a.findTarget(rt, k);
    std::cout << output << std::endl;
}
