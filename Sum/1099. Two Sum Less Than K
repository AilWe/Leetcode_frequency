/*
Given an array A of integers and integer K, return the maximum S such that there exists i < j with A[i] + A[j] = S and S < K.
If no i, j exist satisfying this equation, return -1.
Example 1:
Input: A = [34,23,1,24,75,33,54,8], K = 60
Output: 58
Explanation: 
We can use 34 and 24 to sum 58 which is less than 60.
Example 2:
Input: A = [10,20,30], K = 15
Output: -1
Explanation: 
In this case it's not possible to get a pair sum less that 15.
*/
#include <bits/stdc++.h>
#include <vector>
using namespace std;
/*1. Two Sum
Given an array of integers nums and an integer target,
return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution,
and you may not use the same element twice.
You can return the answer in any order. */
class Solution {
public:
    int twoSumLessThanK(vector<int>& A, int K) {
        sort(A.begin(), A.end()); //directly change the value of vector
        int target = K-1;
        if (A.size() < 2)
            return -1;
        while (target < K && target >= A[0]+A[1]){
            int l = 0;
            int h = A.size() - 1;
            while (l < h){
                int sum = A[l] + A[h];
                if (sum == target)
                    return target;
                else if (sum < target)
                    l++;
                else
                    h--;
            }
            target --;
        }
        return -1;
    }
};
//Driven
int main() {
    int sum;
     vector <int> numbers = {34,23,1,24,75,33,54,8};
    int target = 60;
    Solution a;
    sum = a.twoSumLessThanK(numbers, target);
    cout << sum << endl;
}
//Brute force
#include <bits/stdc++.h>
#include <vector>
using namespace std;
class Solution {
public:
    int twoSumLessThanK(vector<int>& A, int K) {
        sort(A.begin(), A.end());
        if (A.size()< 2)
            return -1;
        int target = K - 1;
        while(K > target && target >= A[0]+A[1]){
            for (int i = 0; i < A.size(); i++){
                for(int j = i+1; j < A.size(); j++){
                    if(A[i] + A[j] == target){
                        return target;
                    }
                }
            }
            target --;
        }
        return -1;
    }
};
//Driven
int main() {
    int sum;
     vector <int> numbers = {34,23,1,24,75,33,54,8};
    int target = 60;
    Solution a;
    sum = a.twoSumLessThanK(numbers, target);
    cout << sum << endl;
}
//Binary Search
#include <bits/stdc++.h>
#include <vector>
using namespace std;

class Solution {
public:
    int twoSumLessThanK(vector<int>& A, int K) {
        int S = -1;
        sort(A.begin(), A.end());
        for (int i = 0; i < A.size() && A[i] < K; i++){
            int j =lower_bound(A.begin() + i + 1, end(A), K-A[i])- A.begin() -1;
            //cout << i << j;
            if (i < j)
                S = max(S,A[i]+A[j]);
        }
        return S;
    }
};
//Driven
int main() {
    int sum;
     vector <int> numbers = {34,23,1,24,75,33,54,8};
    int target = 60;
    Solution a;
    sum = a.twoSumLessThanK(numbers, target);
    cout << sum << endl;
}


