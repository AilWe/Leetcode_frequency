/*Given the root node of a binary search tree, return the sum of values of all nodes with value between L and R (inclusive).

The binary search tree is guaranteed to have unique values.
Input: root = [10,5,15,3,7,null,18], L = 7, R = 15
Output: 32
Input: root = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10
Output: 23
*/
//recursive
#include <iostream>

struct TreeNode{
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(): val(0), left(nullptr), right(nullptr){}
    TreeNode(int number): val(number), left(nullptr),right(nullptr){}
    //TreeNode(int number, TreeNode *l, TreeNode *r): val(number), left(l), right(r) {}
};
class Solution{
public:
    int sum = 0;
    int rangeSumBST(TreeNode *root, int L, int R){
        if(root == NULL)
            return 0;
        else if (root->val < L)
            return rangeSumBST(root->right, L, R);
        else if (root->val > R)
            return rangeSumBST(root->left, L, R);
        else {
            sum = sum + root->val;
            rangeSumBST(root->left, L, R);
            rangeSumBST(root->right, L, R);
        }
        return sum;
    }
};
int main(){
    struct TreeNode* rt = new TreeNode(10);
    rt-> left = new TreeNode(5);
    rt-> right = new TreeNode(15);
    rt-> left ->left = new TreeNode (3);
    rt-> left -> right = new TreeNode(7);
    rt -> right -> right = new TreeNode(18);
    int L = 7;
    int R = 15;
    Solution a;
    int sum =  a.rangeSumBST(rt, L, R);
    std::cout << sum;
    return 0;
}
