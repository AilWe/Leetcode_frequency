The i-th person has weight people[i], and each boat can carry a maximum weight of limit.

Each boat carries at most 2 people at the same time, provided the sum of the weight of those people is at most limit.

Return the minimum number of boats to carry every given person.  (It is guaranteed each person can be carried by a boat.)
as described above, if the heaviest person can share a boat with the lightest person (if people[j] + people[i] <= limit) then do so; otherwise, the heaviest person sits in their own boat
//Greedy+Two pointers
//T: O(nlogn) S: O(1)
//Put one heaviest guy and put the lightest guy if not full
class Solution {
public:
    int numRescueBoats(vector<int>& people, int limit) {
        sort(people.rbegin(), people.rend());
        int i = 0;
        int j = people.size() - 1;
        int ans = 0;
        while(i<=j){
            ++ans;
            if(i == j) break;
            if(people[i]+people[j] <= limit){//最多两个人
                --j;
            }
            ++i;
        }
        return ans;
    }
};
