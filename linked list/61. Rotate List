/*Given a linked list, rotate the list to the right by k places, where k is non-negative.*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(head == NULL) return NULL;
        ListNode* tail = head;
        int numberofnode = 1;
        while(tail->next != NULL){
            tail = tail->next;
            numberofnode++;
        }
        ListNode* prev = head;
        k = k%numberofnode;
        if(k==0) return head;
        for(int i = 0; i<numberofnode-k-1;i++){
            prev = prev->next;
        }
        ListNode* newhead = prev->next;
        prev->next = NULL;
        tail->next = head;
        return newhead;    
    }
};
