Given head, the head of a linked list, determine if the linked list has a cycle in it.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.

Return true if there is a cycle in the linked list. Otherwise, return false.

// Use extra space
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 //time complexity: O(n); space complexity: O(n)
class Solution {
public:
    bool hasCycle(ListNode *head) {
        unordered_set <ListNode*> visited;
        while(head){
            if(visited.count(head)) return true;
            visited.insert(head);
            head = head -> next;
        }
        return false;
        
    }
};
//快指针慢指针
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
       //快慢指针
       //faster pointer: p/2 steps; slow pointer: p steps
       //快指针可以追上慢指针
        ListNode* fast = head;
        ListNode* slow = head;
        while(fast){
            if(fast->next == NULL) return false;
            fast = fast -> next -> next;
            slow = slow -> next;
            if(fast == slow){
                return true;
            }
        }
        return false;
    }
};
