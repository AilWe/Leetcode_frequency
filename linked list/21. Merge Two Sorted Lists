Merge two sorted linked lists and return it as a new sorted list. 
The new list should be made by splicing together the nodes of the first two lists.
//iterative Time complexity O(min(m,n))
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode dummy(0);
        ListNode* tail = &dummy;
        while(l1&&l2){
            if(l1-> val < l2 -> val){
                tail->next = l1;
                l1 = l1->next;
            }
            else{
                tail->next = l2;
                l2 = l2->next;
            }
            tail = tail->next;
        }
        if(l1) tail->next = l1;
        if(l2) tail->next = l2;
        return dummy.next;
    }
};
merge(a,b)
= a , if b is empty
= b , if a is empty
= a[0] + merge(a[1:], b), if a[0] < b[0]
= b[0] + merge(a, b[1:]), otherwise

Time complexity
Array:
T(n) = n+T(n-1)
T(n) = O(n^2)

LinkedList:
T(n) = 1+T(n-1)
T(n) = O(n)
//recursive
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(!l1 || !l2) return l1? l1: l2;
        if(l1->val< l2->val){
            l1->next = mergeTwoLists(l1->next, l2);
            return l1;
        }
        else{
            l2->next = mergeTwoLists(l1, l2->next);
            return l2;
        }
    }
};
