206. Reverse Linked List
Reverse a singly linked list.
//recursive
class Solution {
    ListNode *dummy = new ListNode(0);
    ListNode *curr = dummy;
public:
    ListNode* reverseList(ListNode* head) {
        if(head == NULL) return NULL;
        reverseList(head->next);
        curr->next = new ListNode(head->val);
        curr = curr->next;
        return dummy->next;
    }
};
//iterative
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(head == NULL || head->next == NULL) return head;
        ListNode*p = reverseList(head->next);
        head->next->next = head;
        head->next = nullptr;
        return p;
    }
};
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode* next;
        ListNode* prev = NULL;
        ListNode *curr = head;
        while(curr){
            next = curr->next;
            curr ->next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
        
    }
};
