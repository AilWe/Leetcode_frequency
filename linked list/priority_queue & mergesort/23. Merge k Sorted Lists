23. Merge k Sorted Lists
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size()==0) return NULL;
        auto comp = [](ListNode *a, ListNode *b){
            return a->val > b->val;
        };
        priority_queue<ListNode*, vector<ListNode*>, decltype (comp)> q(comp);
        ListNode dummy(0);
        ListNode* curr = &dummy;
        for(int i = 0; i< lists.size(); ++i){
            if(lists[i]) q.push(lists[i]);
        }
        while(!q.empty()){
            curr->next = q.top();
            curr = curr->next;
            q.pop();
            if(curr->next) q.push(curr->next);
        }
        return dummy.next;
    }
};
//divide and conquer
//T: O(nklogk) S: O(logk) -> O(1)
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        return merge(lists, 0, lists.size()-1);
    }
    ListNode* merge(vector<ListNode*> &lists, int l, int r){
        if(l> r) return NULL;
        if(l==r) return lists[l];
        if(l+1==r) return mergeTwoList(lists[l], lists[r]);
        int m = l+(r-l)/2;
        auto l1 = merge(lists, m+1, r);
        auto l2 = merge(lists, l, m);
        return mergeTwoList(l1, l2);
    }
    ListNode* mergeTwoList(ListNode* l1, ListNode* l2){
        if(!l1&&!l2) return NULL;
        ListNode dummy(0);
        ListNode* tail = &dummy;
        while(l1 && l2){
            if(l1->val > l2->val) swap(l1,l2);
            tail->next = l1;
            l1 = l1->next;
            tail = tail->next;
        }
        if(!l1||!l2) tail->next = l1? l1: l2;
        return dummy.next;
    }
};
