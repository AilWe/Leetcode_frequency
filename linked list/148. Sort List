Insertion Sort: 
  array T: O(n^2) S: O(1)
  list T: O(n^2) S: O(1)
Heap Sort:
  array T:O(nlogn) S:O(1)
  list T:O(nlogn) S:O(n)
  list T:O(n^2logn) S:O(1)
Quick Sort:
  array T:O(nlogn) - O(n^2) S:O(logn) - O(n)
  list T:O(nlogn) - O(n^2) S:O(logn) - O(n)
Merge Sort(top down) 
  array T: O(nlogn) S: O(n+logn)
  list T: O(nlogn) S: O(logn)
Merge Sort(bottom up)
  array T: O(nlogn) S: O(n)
  list T: O(nlogn) S: O(1)
Given the head of a linked list, return the list after sorting it in ascending order. Can you sort the linked list in O(n logn) time and O(1) memory (i.e. constant space)?
//top down O(n logn) O(logn)
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
    private:
    ListNode* merge(ListNode* l1, ListNode* l2){
        ListNode dummy(0);
        ListNode* curr = &dummy;
        while(l1&&l2){
            if(l1->val > l2-> val){
                swap(l1, l2);
            }
            curr->next = l1;
            l1 = l1 -> next;
            curr = curr-> next;
        }
        if(l1) curr->next = l1;
        if(l2) curr->next = l2;
        return dummy.next;
    }
public:
    ListNode* sortList(ListNode* head) {
        //Split the list into two parts using fast/slow pointers
        //l1.l2 = split(1)
        //l1',l2' = sortList(l1), sortList(l2)
        //merge(l1', l2')
        //Time complexity
        if(!head||!head->next) return head;
        ListNode* fast = head->next;
        ListNode* slow = head;
        while(fast && fast-> next){
            fast = fast -> next -> next;
            slow = slow -> next;
        }
        ListNode* mid = slow-> next;
        slow -> next = nullptr;
        return merge(sortList(head), sortList(mid));
    }
};
 
//bottom up T:O(nlogn) S:O(1)
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
    private:
    //split the list into two parts, first n element and the rest
    //return the head of rest
    ListNode* split(ListNode* head, int n){
        while(--n && head)
            head = head-> next;
        ListNode* rest = head? head->next: nullptr;
        if(head) head-> next = nullptr;
        return rest;
    }
    //merge two list
    pair <ListNode*, ListNode*> merge(ListNode* l1, ListNode* l2){
        ListNode dummy(0);
        ListNode* tail = &dummy;
        while(l1&&l2){
            if(l1->val > l2-> val){
                swap(l1, l2);
            }
            tail->next = l1;
            l1 = l1 -> next;
            tail = tail-> next;
        }
        if(l1) tail->next = l1;
        if(l2) tail->next = l2;
        while(tail->next) tail = tail-> next;
        return {dummy.next, tail};
    }
public:
    ListNode* sortList(ListNode* head) {
        //Split the list into n/(2^i) lists(n, n/2,n/4), each group has 2^i elements
        //merge every pair of sorted list.
        //Time:O(nlogn) S: O(1)
        if(!head||!head->next) return head;
        int len = 1;
        ListNode* cur = head;
        while(cur = cur ->next) ++len;
        
        ListNode dummy(0);
        dummy.next = head;
        ListNode* l;
        ListNode* r;
        ListNode* tail;
        for(int n = 1; n< len; n<<=1){
            cur = dummy.next;
            tail = &dummy;
            while(cur){
                l = cur;
                r = split(l,n);
                cur = split(r,n);
                pair <ListNode*, ListNode*> merged = merge(l,r);
                tail->next = merged.first;
                tail = merged.second;
            }
        }
        return dummy.next;
    }
};
