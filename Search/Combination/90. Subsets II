Given a collection of integers that might contain duplicates, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.
class Solution {
public:
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        vector<vector<int>> ans;
        vector<int> curr;
        for(int n = 0; n<= nums.size(); n++)
            combination_dfs(ans, nums, 0, n, 0, curr);
        return ans;
    }
    void combination_dfs(vector<vector <int>> &ans, vector<int> &nums, int d, int n, int s, vector<int> &curr ){
        if(d == n){
            ans.push_back(curr);
            return;
        }
        for(int i = s; i<nums.size(); ++i){
            if(i > s && nums[i] == nums[i-1])
                continue;
            curr.push_back(nums[i]);
            combination_dfs(ans, nums, d+1, n, i+1, curr);
            curr.pop_back();
        }
    }
};
