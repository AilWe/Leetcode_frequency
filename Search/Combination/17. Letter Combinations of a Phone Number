17. Letter Combinations of a Phone Number
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.
//dfs
class Solution {
    //Combination
    vector <string> ans;
public:
    vector<string> letterCombinations(string digits) {
        if(digits.empty()) return {};
        
        vector <vector <char>> mp(10);
        mp[0]= {' '};
        mp[1] = {};
        mp[2] = {'a','b','c'};
        mp[3] = {'d','e','f'};
        mp[4] = {'g','h','i'};
        mp[5] = {'j','k','l'};
        mp[6] = {'m','n','o'};
        mp[7] = {'p','q','r','s'};
        mp[8] = {'t','u','v'};
        mp[9] = {'w','x','y','z'};
        string cur;
        dfs(digits, mp, 0, cur, ans);
        return ans;
    }
private:
    void dfs(const string& digits, const vector <vector <char>>& mp, int d, string& cur, vector<string>& ans){
        if(d ==  digits.length()){
            ans.push_back(cur);
            return;
        }
        for (char c: mp[digits[d] - '0']){
            cur.push_back(c);
            dfs(digits, mp, d+1,cur, ans);
            cur.pop_back();
        }
    }   
};
