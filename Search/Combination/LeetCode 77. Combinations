Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

You may return the answer in any order.

class Solution {
public:
    vector<vector<int>> combine(int n, int k) {
        vector<int> nums;
        for(int i = 1;i <= n;++i)
            nums.push_back(i);
        vector<vector<int>> ans;
        vector<int> curr;
        combination_dfs(ans, curr, 0, k, 0, nums);
        return ans;
    }
    void combination_dfs(vector<vector<int>> &ans, vector<int> &curr, int t, int k, int s, vector<int> &nums){
        if(t == k){
            ans.push_back(curr);
            return;
        }
        for(int i = s; i< nums.size(); ++i){
            curr.push_back(nums[i]);
            combination_dfs(ans, curr, t+1, k, i+1, nums);
            curr.pop_back();
        }
    }
};
