Find all valid combinations of k numbers that sum up to n such that the following conditions are true:

Only numbers 1 through 9 are used.
Each number is used at most once.
Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.
//C(9, k)
//S: O(k+k*# of ans)
class Solution {
public:
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<int> curr;
        vector<vector<int>> ans;
        dfs(k, n, 0, 1, curr, ans);//nums:(1-9), depthmax = k, target = n 
        return ans;
    }
    void dfs(int k, int n, int d, int s, vector<int> &curr, vector<vector<int>> &ans){
        if(n == 0&&d==k){
            ans.push_back(curr);
            return;
        }
        for(int i = s; i <=9; ++i){
            if(i>n) break;
            curr.push_back(i);
            dfs(k,n-i,d+1,i+1, curr, ans);
            curr.pop_back();
        }
    }
};
//Bit T: O(2^m) = O(2^9)
//S:O(k+K*#of ans)
//if ith bit is 1 , then number (i+1) is used
// total # of 1s should be k
class Solution {
public:
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>> ans;
        
        //2^9 generate all combination of[1..9]
        for(int i = 0; i<(1<<9); ++i){
            vector<int> cur;
            int sum = 0;
            for(int j = 1; j<=9; ++j)
                if(i &(1<<(j-1))){
                    sum+=j;
                    cur.push_back(j);
                }
            if(sum == n && cur.size() == k)
                ans.push_back(cur);
        }
        return ans;
    }
};
