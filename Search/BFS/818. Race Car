818. Race Car
Your car starts at position 0 and speed +1 on an infinite number line.  (Your car can go into negative positions.)

Your car drives automatically according to a sequence of instructions A (accelerate) and R (reverse).

When you get an instruction "A", your car does the following: position += speed, speed *= 2.

When you get an instruction "R", your car does the following: if your speed is positive then speed = -1 , otherwise speed = 1.  (Your position stays the same.)

For example, after commands "AAR", your car goes to positions 0->1->3->3, and your speed goes to 1->2->4->-1.

Now for some target position, say the length of the shortest sequence of instructions to get there.

Solution 1: BFS

Node: {pos,  speed}

Only de-duplicate nodes with speed +-1, otherwise LTE or OOM

T: O(2^D), S: O(2^D) D is the # of steps

Solution 2: Recursion with memorization (DP)

Best case: t = 2^n - 1, A^n

Strategy 1: acc for n steps pass target and turn around.

dp(t) = A^n*R/(n+1) + dp(left)
Left = 2^n - 1 - t

Strategy 2: acc for n-1 steps turnaround, acc for m steps and turn around again

dp(t) = min{A^(n-1) * R * A^m * R (n+m+1) + dp(left)}, m in [0, n-1]
Left = t - (2^(n-1) - 1) + (2^m - 1)

T: O(TlogT), S: O(T + logT)
