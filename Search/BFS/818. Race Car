818. Race Car
Your car starts at position 0 and speed +1 on an infinite number line.  (Your car can go into negative positions.)

Your car drives automatically according to a sequence of instructions A (accelerate) and R (reverse).

When you get an instruction "A", your car does the following: position += speed, speed *= 2.

When you get an instruction "R", your car does the following: if your speed is positive then speed = -1 , otherwise speed = 1.  (Your position stays the same.)

For example, after commands "AAR", your car goes to positions 0->1->3->3, and your speed goes to 1->2->4->-1.

Now for some target position, say the length of the shortest sequence of instructions to get there.

Solution 1: BFS

Node: {pos,  speed}

Only de-duplicate nodes with speed +-1, otherwise LTE or OOM

T: O(2^D), S: O(2^D) D is the # of steps
class Solution {
public:
    int racecar(int target) {
        queue<pair<int, int>> q;
        q.push({0,1});
        unordered_set<string> v;
        v.insert("0_1");
        v.insert("0_-1");
        int steps = 0;
        while(!q.empty()){
            int size = q.size();
            while(size--){
                auto p = q.front(); q.pop();
                int pos = p.first;
                int speed = p.second;
                int pos1 = pos + speed;
                
                int speed1 = speed * 2;
                pair<int, int> p1{pos1, speed1};
                if(pos1 == target) return steps + 1;
                if(abs(p1.second) < 2 * target && abs(p1.first) < 2* target)//pruning
                    q.push(p1);
                
                int speed2 = speed > 0? -1: 1;
                pair<int, int> p2{pos, speed2};
                string key2 = to_string(pos) + "_" + to_string(speed2);
                if(!v.count(key2)){
                    q.push(p2);
                    v.insert(key2);
                }
                
            }
            ++steps;
        }
        return -1;
    }
};

Solution 2: Recursion with memorization (DP)

Best case: t = 2^n - 1, A^n

Strategy 1: acc for n steps pass target and turn around.

dp(t) = A^n*R/(n+1) + dp(left)
Left = 2^n - 1 - t

Strategy 2: acc for n-1 steps turnaround, acc for m steps and turn around again

dp(t) = min{A^(n-1) * R * A^m * R (n+m+1) + dp(left)}, m in [0, n-1]
Left = t - (2^(n-1) - 1) + (2^m - 1)

T: O(TlogT), S: O(T + logT)
