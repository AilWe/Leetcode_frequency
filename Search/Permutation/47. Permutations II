Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.
class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        vector<vector<int>> ans;
        vector<int> used(n);
        vector<int> curr;
        dfs(0, ans, curr, used, nums);
        return ans;
    }
    void dfs(int d, vector<vector<int>> &ans, vector<int> &curr, vector<int> &used, const vector<int> &nums){
        if(d == nums.size()){
            ans.push_back(curr);
            return;
        }
        for(int i = 0; i< nums.size();++i){
            if(used[i] == 1) continue;
            if(i>0 && nums[i] == nums[i-1]&& used[i-1]==0) continue;
            used[i] = 1;
            curr.push_back(nums[i]);
            dfs(d+1, ans, curr, used, nums);
            curr.pop_back();
            used[i] = 0;
        }
    }
};
