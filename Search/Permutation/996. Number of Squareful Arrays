996. Number of Squareful Arrays
Given an array A of non-negative integers, the array is squareful if for every pair of adjacent elements, their sum is a perfect square.

Return the number of permutations of A that are squareful.  Two permutations A1 and A2 differ if and only if there is some index i such that A1[i] != A2[i].
//dfs
class Solution {
public:
    int numSquarefulPerms(vector<int>& A) {
        sort(A.begin(), A.end());
        if(A.size()<2) return 0;
        int ans = 0;
        vector<int> curr;
        vector<int> used(A.size(), 0);
        dfs(ans, curr, A, 0, used);
        return ans;
    }
    void dfs(int &ans, vector<int> &curr, vector<int> &A, int d, vector<int> &used){
        if(d == A.size()){
                ans++;
            return;
        }
        for(int i = 0; i< A.size(); ++i){
            if(used[i]) continue;
            if(i>0&&A[i] == A[i-1]&&used[i-1] == 0) continue;
            if(!curr.empty() && !isvalid(curr.back(), A[i])) continue;
            curr.push_back(A[i]);
            used[i] = 1;
            dfs(ans, curr, A, d+1, used);
            used[i] = 0;
            curr.pop_back();
        }
    }
    bool isvalid(int x, int y){
        int s = sqrt(x+y);
        return s*s == x+y;
    }
};
//dp
class Solution {
public:
  int numSquarefulPerms(vector<int>& A) {
    const int n = A.size();
    // For deduplication.
    std::sort(begin(A), end(A));        
    // g[i][j] == 1 if A[i], A[j] are squareful.
    vector<vector<int>> g(n, vector<int>(n)); 
    // dp[s][i] := number of ways to reach state s and ends with node i.
    vector<vector<int>> dp(1 << n, vector<int>(n)); 
 
    for (int i = 0; i < n; ++i) {      
      for (int j = 0; j < n; ++j) {
        if (i == j) continue;
        int r = sqrt(A[i] + A[j]);
        if (r * r == A[i] + A[j])
          g[i][j] = 1;
      }
    }
    
    // For the same numbers, only the first one can be the starting point.
    for (int i = 0; i < n; ++i)
      if (i == 0 || A[i] != A[i - 1])
        dp[(1 << i)][i] = 1;    
    
    int ans = 0;
    for (int s = 0; s < (1 << n); ++s)
      for (int i = 0; i < n; ++i) {
        if (!dp[s][i]) continue;
        for (int j = 0; j < n; ++j) {
          if (!g[i][j]) continue;
          if (s & (1 << j)) continue;
          // Only the first one can be used as the dest.
          if (j > 0 && !(s & (1 << (j - 1))) && A[j - 1] == A[j]) continue;
          dp[s | (1 << j)][j] += dp[s][i];
        }
      }
    
    for (int i = 0; i < n; ++i)
      ans += dp[(1 << n) - 1][i];
    return ans;
  }
};
