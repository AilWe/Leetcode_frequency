Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.
//Time complexity: O(n!)
//Space complexity: O(n)
class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        const int n = nums.size();
        vector<vector<int>> ans;
        vector<int> curr;
        vector<int> used(n);
        dfs(nums, curr, ans, used, 0);
        return ans;
    }
    void dfs(const vector<int> &nums, vector<int> &curr, vector<vector<int>> &ans, vector<int> &used, int d){
        if(d == nums.size()){
            ans.push_back(curr);
            return;
        }
        for(int i = 0; i< nums.size(); ++i){
            if(used[i] == 1) continue;
            used[i] = 1;
            curr.push_back(nums[i]);
            dfs(nums, curr, ans, used, d+1);
            curr.pop_back();
            used[i] = 0;
        }
    }
};
