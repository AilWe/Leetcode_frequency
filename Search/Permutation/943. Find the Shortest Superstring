943. Find the Shortest Superstring
Given an array A of strings, find any smallest string that contains each string in A as a substring.

We may assume that no string in A is substring of another string in A.
/*
Searcg(DFS/backtracing)
Try all permutations
preprocessing +pruning are important to AC
T: O(n!)只能到10左右
S: O(n)
*/
class Solution {
public:
    string shortestSuperstring(vector<string>& A) {
        const int n = A.size();
        g_ = vector<vector<int>>(n, vector<int>(n));//预处理，把单词j放在i后面 cost
        for(int i = 0; i<n;++i)
            for(int j = 0; j<n;++j){
                g_[i][j] = A[j].length();
                for (int k = 1; k<= min(A[i].length(), A[j].length()); ++k)
                    if(A[i].substr(A[i].size()-k) == A[j].substr(0,k))
                        g_[i][j] = A[j].length()-k;
            }
        vector<int> path(n);
        best_len_ = INT_MAX;
        dfs(A,0,0,0,path);
        string ans = A[best_path_[0]];
        for(int k = 1; k< best_path_.size();++k){
            int i = best_path_[k-1];
            int j = best_path_[k];
            ans = ans + A[j].substr(A[j].length() - g_[i][j]);
        }
        return ans;
    }
private:
    vector<vector<int>> g_;
    vector<int> best_path_;
    int best_len_;
    //used 是一个二进制数
    void dfs(const vector<string> &A, int d, int used, int cur_len, vector<int> &path){
        if(cur_len>=best_len_) return;
        if(d == A.size()){
            best_len_ = cur_len;
            best_path_ = path;
            return;
        }
        for(int i = 0; i<A.size();++i){
            if(used & (1<<i)) continue;
            path[d] = i;
            dfs(A, d+1, used|(1<<i), d==0? A[i].length():cur_len+g_[path[d-1]][i], path);
        }
    }
    
};
class Solution {
private:
    vector<vector<int>> g_;
    vector<int> best_path_;
    int best_len_;
public:
    string shortestSuperstring(vector<string>& A) {
        const int n = A.size();
        g_ = vector<vector<int>>(n, vector<int>(n));//record length
        for(int i = 0; i< n; ++i){
            for(int j = 0; j<n; ++j){
                g_[i][j] = A[j].length();
                for(int k = 1; k< min(A[i].length(), A[j].length()); ++k){
                    if(A[i].substr(A[i].size()-k) == A[j].substr(0, k)){
                        g_[i][j] = A[j].length()-k;
                    }
                }
            }
        }
        vector<int> path(n);
        best_len_ = INT_MAX;
        vector<int> used(A.size(), 0);
        dfs(A, 0, used, 0, path);
        string ans = A[best_path_[0]];
        for(int k = 1; k < best_path_.size(); ++k){
            int i = best_path_[k-1];
            int j = best_path_[k];
            ans += A[j].substr(A[j].length()-g_[i][j]);
        }
        return ans;
    }
    void dfs(vector<string> &A, int d, vector<int> &used, int curr_len_, vector<int>&path){
        if(curr_len_>= best_len_) return;
        if(A.size() == d){
            best_len_ = curr_len_;
            best_path_ = path;
            return;
        }
        for (int i = 0; i< A.size(); ++i){
            if(used[i]) continue;
            path[d] = i;
            used[i] = 1;
            dfs(A, d+1, used, d == 0? A[i].length():curr_len_+g_[path[d-1]][i], path);
            used[i] = 0;
        }
    }
};
//dp
g[i][j] := the cost of appending word[j] after word[i] 
e.g. dist('gcta','ctaagt') = 3
we want to find the shortest path that visits each node and only once

Memorization of the combination and the last node instead of permutaion
dp[s][i]:= min cost to visting nodes of s and ends with i, s is a binary string. 
e.g. dp[14][2] is the min cost to visit {1,2,3} and ends with 2. 
Init: dp[2^i][1] = len(A[i]) # visit i, the cost is len(A[i])

Transition:
dp[s][i] = min{dp[s-2^i][j] + g[i][j]} #append A[i] after A[j]
Ans: min(dp[2^n-1][*])
T: O(n^2 * 2^n)
S: O(n* 2^n)
//graph 中找一条路径
