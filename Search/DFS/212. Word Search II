212. Word Search II
Given an m x n board of characters and a list of strings words, return all words on the board.

Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.

Solution 1: Use DFS to find each word in the board
T: O(sum(m*n*4^l)
S: O(l)
class Solution {
public:
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        unordered_set<string> unique_words(words.begin(), words.end());
        vector<string> ans;
        for(const string &word: unique_words)
            if(exist(board, word))
                ans.push_back(word);
        return ans;
    }
private:
    int w;
    int h;
    bool exist(vector<vector<char>> &board, string word){
        if(board.size() == 0) return false;
        h = board.size();
        w = board[0].size();
        for(int i = 0; i< w; ++i)
            for(int j = 0; j< h; ++j)
                if(search(board, word, 0, i, j)) return true;
        return false;
    }
    
    bool search(vector<vector<char>> &board, const string &word, int d, int x, int y){
        if(x<0|| x == w|| y<0 || y ==h || word[d] != board[y][x]) return false;//pruning
        
        //Found the last char of the word
        if(d == word.length()-1)
            return true;
        
        char cur = board[y][x];
        board[y][x] = '#';
        bool found = search(board, word, d+1, x+1, y) || search(board, word, d+1, x-1, y) || search(board, word, d+1, x, y+1) || search(board, word, d+1, x, y-1);
        board[y][x] = cur;
        return found;
    }
};

Solution 2: Build a trie of the dictionary and use DFS to traverse the board, the path must also exist in trie
T: O(m*n*4^l), S: O(sum(l))
