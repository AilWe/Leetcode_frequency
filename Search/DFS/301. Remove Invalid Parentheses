301. Remove Invalid Parentheses
Remove the minimum number of invalid parentheses in order to make the input string valid. Return all possible results.
1. Check whether a input string is valid
((), )(
count(')') <= count('(') i < n-1
count(')') == count('(') i = n-1

2. Compute min number of '(' and ')' to remove
Unbalanced ')' + Unbalanced '('

3. Try all possible ways to remove r')'s and l'('. Remove ')' first to make prefix valid

dfs(s,l,r)
  if l == 0 and r == 0 and valid(s):
    ans.add(s)
Avoid duplications:
"(()" -> "()"
Only remove the first paransthesis if there are consective ones

T: O(2^l+r), S: O((l+r)^2) ~ O(n^2)
class Solution {
public:
    vector<string> removeInvalidParentheses(string s) {
        int l = 0;
        int r = 0;
        for(auto c: s){
            if(c == '(') ++l;
            else if(c== ')'){
                if (l == 0) ++r;
                else --l;
            }
        }
        vector<string> ans;
        dfs(s, 0, l, r, ans);
        return ans;
    }
    
    //l/r: number of left/right parentheses to remove
    void dfs(const string &s, int start, int l, int r, vector<string> &ans){
        //Nothing to remove
        if(l == 0 && r == 0){
            if(isValid(s)) ans.push_back(s);
            return;
        }
        
        for(int i = start; i< s.length(); ++i){
            //we only remove the first parentheses if there are consective one to avoid duplication
            if(i>start && s[i] == s[i-1]) continue;
            
            if(s[i] == '(' || s[i] == ')'){
                string curr = s;
                curr.erase(i, 1);
                if(r>0 && s[i] == ')')
                    dfs(curr, i, l, r-1, ans);
                else if(l>0 && s[i] == '(')
                    dfs(curr, i, l-1, r, ans);
            }
        }
    }
    bool isValid(string s){
        int count = 0;
        for(const char ch : s){
            if(ch == '(') ++count;
            if(ch == ')') --count;
            if(count < 0 ) return false;
        }
        return count == 0;
    }
};
