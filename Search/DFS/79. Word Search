Given an m x n board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where "adjacent" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.

for y in 1..n
  for x in 1..n
    if search(x, y, 0): return true
return false

search(x, y, 0)
  if out_of_bound(x, y): return false
  if word[d] != grid[y][x]: return false
  if d == word.length-1:return true
  return search (x-1, y, d+1) or search(x+1,y, d+1) or search(x, y-1, d+1) or search(x, y+1, d+1)
T: seach: O(4^l), l = len(word)
total: O(m*n*4^l)

S: total O(m*n + l)
class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        if(board.size() == 0) return false;
        h = board.size();
        w = board[0].size();
        for(int i = 0; i<w; ++i){
            for(int j = 0; j< h; ++j){
                if(search(board, word, 0, i, j)) return true;
            }
        }
        return false;
    }
    bool search(vector<vector<char>> &board, const string &word, int d, int x, int y){
        if(x<0 || x==w || y<0 || y == h || word[d] != board[y][x])
            return false;
        
        //Found the last char of the word
        if(d == word.length()-1) return true;
        
        char cur = board[y][x];
        board[y][x] = 0;
        bool found = search(board, word, d+1, x+1, y)
            || search(board, word, d+1, x-1, y)
            || search(board, word, d+1, x, y+1)
            || search(board, word, d+1, x, y-1);
        board[y][x] = cur;
        return found;
    }
private:
    int w;
    int h;
};
